{
  "created": 1713408574.2958124,
  "duration": 39.5756950378418,
  "exitcode": 1,
  "root": "/home/HGCAL_dev/mstamenk/econd-sw/test_bench",
  "environment": {
    "Python": "3.6.8",
    "Platform": "Linux-4.19.0-xilinx-v2019.2-aarch64-with-centos-7.9.2009-AltArch",
    "Packages": {
      "pytest": "7.0.1",
      "py": "1.11.0",
      "pluggy": "1.0.0"
    },
    "Plugins": {
      "order": "1.1.0",
      "json-report": "1.5.0",
      "anyio": "3.3.1",
      "ordering": "0.6",
      "metadata": "1.11.0",
      "repeat": "0.9.1"
    }
  },
  "summary": {
    "failed": 5,
    "passed": 26,
    "error": 17,
    "skipped": 13,
    "total": 61,
    "collected": 61
  },
  "collectors": [
    {
      "nodeid": "",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_algorithm.py",
          "type": "Module"
        },
        {
          "nodeid": "test_bist_threshold.py",
          "type": "Module"
        },
        {
          "nodeid": "test_common_mode.py",
          "type": "Module"
        },
        {
          "nodeid": "test_errin.py",
          "type": "Module"
        },
        {
          "nodeid": "test_fc.py",
          "type": "Module"
        },
        {
          "nodeid": "test_i2c.py",
          "type": "Module"
        },
        {
          "nodeid": "test_input_aligner.py",
          "type": "Module"
        },
        {
          "nodeid": "test_io.py",
          "type": "Module"
        },
        {
          "nodeid": "test_mux_fix_calib.py",
          "type": "Module"
        },
        {
          "nodeid": "test_packets.py",
          "type": "Module"
        },
        {
          "nodeid": "test_pll.py",
          "type": "Module"
        },
        {
          "nodeid": "test_power.py",
          "type": "Module"
        },
        {
          "nodeid": "test_serializer.py",
          "type": "Module"
        }
      ]
    },
    {
      "nodeid": "test_algorithm.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_algorithm.py::test_algorithm_compression_emu[../econt_testvectors/counterPatternInTC/RPT/]",
          "type": "Function",
          "lineno": 58
        },
        {
          "nodeid": "test_algorithm.py::test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC/RPT/]",
          "type": "Function",
          "lineno": 213
        },
        {
          "nodeid": "test_algorithm.py::test_algorithm_compression_bypass[../econt_testvectors/mcDataset/STC_type0_eTx4/]",
          "type": "Function",
          "lineno": 213
        },
        {
          "nodeid": "test_algorithm.py::test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/RPT/]",
          "type": "Function",
          "lineno": 213
        },
        {
          "nodeid": "test_algorithm.py::test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/BC_10eTx/0]",
          "type": "Function",
          "lineno": 213
        },
        {
          "nodeid": "test_algorithm.py::test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/BC_5eTx/]",
          "type": "Function",
          "lineno": 213
        },
        {
          "nodeid": "test_algorithm.py::test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/BC_1eTx/0]",
          "type": "Function",
          "lineno": 213
        },
        {
          "nodeid": "test_algorithm.py::test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/BC_1eTx/1]",
          "type": "Function",
          "lineno": 213
        },
        {
          "nodeid": "test_algorithm.py::test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/BC_10eTx/1]",
          "type": "Function",
          "lineno": 213
        },
        {
          "nodeid": "test_algorithm.py::test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/TS_Thr47_13eTx/]",
          "type": "Function",
          "lineno": 213
        }
      ]
    },
    {
      "nodeid": "test_bist_threshold.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_bist_threshold.py::test_bist",
          "type": "Function",
          "lineno": 3
        }
      ]
    },
    {
      "nodeid": "test_common_mode.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_common_mode.py::test_common_mode_erx_route",
          "type": "Function",
          "lineno": 169
        }
      ]
    },
    {
      "nodeid": "test_errin.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_errin.py::test_errBit[129-128]",
          "type": "Function",
          "lineno": 48
        },
        {
          "nodeid": "test_errin.py::test_errBit[129-16]",
          "type": "Function",
          "lineno": 48
        }
      ]
    },
    {
      "nodeid": "test_fc.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_fc.py::test_fc_lock",
          "type": "Function",
          "lineno": 2
        }
      ]
    },
    {
      "nodeid": "test_i2c.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_i2c.py::test_rw_allregisters[0]",
          "type": "Function",
          "lineno": 54
        },
        {
          "nodeid": "test_i2c.py::test_rw_allregisters[255]",
          "type": "Function",
          "lineno": 54
        },
        {
          "nodeid": "test_i2c.py::test_hard_reset_i2c_allregisters",
          "type": "Function",
          "lineno": 91
        },
        {
          "nodeid": "test_i2c.py::test_soft_reset_i2c_allregisters",
          "type": "Function",
          "lineno": 124
        },
        {
          "nodeid": "test_i2c.py::test_wrong_reg_address",
          "type": "Function",
          "lineno": 157
        },
        {
          "nodeid": "test_i2c.py::test_alladdresses[0]",
          "type": "Function",
          "lineno": 189
        },
        {
          "nodeid": "test_i2c.py::test_alladdresses[1]",
          "type": "Function",
          "lineno": 189
        },
        {
          "nodeid": "test_i2c.py::test_alladdresses[2]",
          "type": "Function",
          "lineno": 189
        },
        {
          "nodeid": "test_i2c.py::test_alladdresses[3]",
          "type": "Function",
          "lineno": 189
        },
        {
          "nodeid": "test_i2c.py::test_alladdresses[4]",
          "type": "Function",
          "lineno": 189
        },
        {
          "nodeid": "test_i2c.py::test_alladdresses[5]",
          "type": "Function",
          "lineno": 189
        },
        {
          "nodeid": "test_i2c.py::test_alladdresses[6]",
          "type": "Function",
          "lineno": 189
        },
        {
          "nodeid": "test_i2c.py::test_alladdresses[7]",
          "type": "Function",
          "lineno": 189
        },
        {
          "nodeid": "test_i2c.py::test_alladdresses[8]",
          "type": "Function",
          "lineno": 189
        },
        {
          "nodeid": "test_i2c.py::test_alladdresses[9]",
          "type": "Function",
          "lineno": 189
        },
        {
          "nodeid": "test_i2c.py::test_alladdresses[10]",
          "type": "Function",
          "lineno": 189
        },
        {
          "nodeid": "test_i2c.py::test_alladdresses[11]",
          "type": "Function",
          "lineno": 189
        },
        {
          "nodeid": "test_i2c.py::test_alladdresses[12]",
          "type": "Function",
          "lineno": 189
        },
        {
          "nodeid": "test_i2c.py::test_alladdresses[13]",
          "type": "Function",
          "lineno": 189
        },
        {
          "nodeid": "test_i2c.py::test_alladdresses[14]",
          "type": "Function",
          "lineno": 189
        },
        {
          "nodeid": "test_i2c.py::test_alladdresses[15]",
          "type": "Function",
          "lineno": 189
        },
        {
          "nodeid": "test_i2c.py::test_wrong_i2c_address",
          "type": "Function",
          "lineno": 218
        },
        {
          "nodeid": "test_i2c.py::test_hold_hard_reset",
          "type": "Function",
          "lineno": 233
        },
        {
          "nodeid": "test_i2c.py::test_hold_soft_reset",
          "type": "Function",
          "lineno": 244
        },
        {
          "nodeid": "test_i2c.py::test_chip_sync",
          "type": "Function",
          "lineno": 278
        }
      ]
    },
    {
      "nodeid": "test_input_aligner.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_input_aligner.py::test_input_aligner_shift[shift0]",
          "type": "Function",
          "lineno": 112
        }
      ]
    },
    {
      "nodeid": "test_io.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_io.py::test_ePortRXPRBS",
          "type": "Function",
          "lineno": 145
        },
        {
          "nodeid": "test_io.py::test_eTX_delayscan",
          "type": "Function",
          "lineno": 176
        },
        {
          "nodeid": "test_io.py::test_eTx_PRBS7",
          "type": "Function",
          "lineno": 221
        },
        {
          "nodeid": "test_io.py::test_alignment_erx",
          "type": "Function",
          "lineno": 302
        },
        {
          "nodeid": "test_io.py::test_alignment_etx",
          "type": "Function",
          "lineno": 330
        }
      ]
    },
    {
      "nodeid": "test_mux_fix_calib.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_mux_fix_calib.py::test_mux",
          "type": "Function",
          "lineno": 36
        },
        {
          "nodeid": "test_mux_fix_calib.py::test_float_to_fix",
          "type": "Function",
          "lineno": 157
        },
        {
          "nodeid": "test_mux_fix_calib.py::test_calibrations",
          "type": "Function",
          "lineno": 286
        }
      ]
    },
    {
      "nodeid": "test_packets.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_packets.py::test_single_fcsequence[counter_100-None-fc_sequence0-eTx-0]",
          "type": "Function",
          "lineno": 137
        },
        {
          "nodeid": "test_packets.py::test_single_fcsequence[counter_100-None-fc_sequence1-eTx-01]",
          "type": "Function",
          "lineno": 137
        },
        {
          "nodeid": "test_packets.py::test_single_fcsequence[counter_100-None-fc_sequence2-eTx-012]",
          "type": "Function",
          "lineno": 137
        },
        {
          "nodeid": "test_packets.py::test_single_fcsequence[counter_100-None-fc_sequence3-eTx-0123]",
          "type": "Function",
          "lineno": 137
        },
        {
          "nodeid": "test_packets.py::test_single_fcsequence[counter_100-None-fc_sequence4-eTx-01234]",
          "type": "Function",
          "lineno": 137
        },
        {
          "nodeid": "test_packets.py::test_single_fcsequence[counter_100-None-fc_sequence5-eTx-012345]",
          "type": "Function",
          "lineno": 137
        },
        {
          "nodeid": "test_packets.py::test_single_fcsequence[None-../econd_testvectors/exampleData/testVectorInputs_Random.csv-fc_sequence6-ZS_37]",
          "type": "Function",
          "lineno": 137
        }
      ]
    },
    {
      "nodeid": "test_pll.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_pll.py::test_pllautolock",
          "type": "Function",
          "lineno": 24
        },
        {
          "nodeid": "test_pll.py::test_pll_capbank_width",
          "type": "Function",
          "lineno": 211
        },
        {
          "nodeid": "test_pll.py::test_pll_lock",
          "type": "Function",
          "lineno": 306
        }
      ]
    },
    {
      "nodeid": "test_power.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_power.py::test_currentdraw_1p2V",
          "type": "Function",
          "lineno": 23
        }
      ]
    },
    {
      "nodeid": "test_serializer.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_serializer.py::test_serializer",
          "type": "Function",
          "lineno": 94
        }
      ]
    }
  ],
  "tests": [
    {
      "nodeid": "test_pll.py::test_pllautolock",
      "lineno": 24,
      "outcome": "failed",
      "keywords": [
        "test_pllautolock",
        "pytestmark",
        "order",
        "pll_test",
        "skip_target",
        "test_pll.py",
        "test_bench"
      ],
      "setup": {
        "duration": 1.3082977790036239,
        "outcome": "passed"
      },
      "metadata": {
        "frequencies_used": [
          280.0,
          281.0,
          282.0,
          283.0,
          284.0,
          285.0,
          286.0,
          287.0,
          288.0,
          289.0,
          290.0,
          291.0,
          292.0,
          293.0,
          294.0,
          295.0,
          296.0,
          297.0,
          298.0,
          299.0,
          300.0,
          301.0,
          302.0,
          303.0,
          304.0,
          305.0,
          306.0,
          307.0,
          308.0,
          309.0,
          310.0,
          311.0,
          312.0,
          313.0,
          314.0,
          315.0,
          316.0,
          317.0,
          318.0,
          319.0,
          320.0,
          321.0,
          322.0,
          323.0,
          324.0,
          325.0,
          326.0,
          327.0,
          328.0,
          329.0,
          330.0,
          331.0,
          332.0,
          333.0,
          334.0,
          335.0,
          336.0,
          337.0,
          338.0,
          339.0,
          340.0,
          341.0,
          342.0,
          343.0,
          344.0,
          345.0,
          346.0,
          347.0,
          348.0,
          349.0,
          350.0,
          351.0,
          352.0,
          353.0,
          354.0,
          355.0,
          356.0,
          357.0,
          358.0,
          359.0,
          360.0,
          361.0,
          362.0,
          363.0,
          364.0,
          365.0,
          366.0,
          367.0,
          368.0,
          369.0,
          370.0,
          371.0,
          372.0,
          373.0,
          374.0,
          375.0,
          376.0,
          377.0,
          378.0,
          379.0,
          380.0,
          381.0,
          382.0,
          383.0,
          384.0,
          385.0,
          386.0,
          387.0,
          388.0,
          389.0,
          390.0,
          391.0,
          392.0,
          393.0,
          394.0,
          395.0,
          396.0,
          397.0,
          398.0,
          399.0,
          400.0
        ],
        "fc_locked": [
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          1,
          1,
          1,
          0,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        "pusm_states": [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        "lol_counts": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        "auto_locks": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        "auto_vcos": [
          120,
          120,
          120,
          120,
          511,
          120,
          511,
          511,
          504,
          504,
          255,
          510,
          511,
          511,
          511,
          510,
          511,
          504,
          504,
          120,
          506,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120,
          120
        ]
      },
      "call": {
        "duration": 15.242078865005169,
        "outcome": "failed",
        "crash": {
          "path": "/home/HGCAL_dev/mstamenk/econd-sw/test_bench/test_pll.py",
          "lineno": 172,
          "message": "assert [0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 1,\\n 1,\\n 1,\\n 1,\\n 0,\\n 0,\\n 1,\\n 1,\\n 1,\\n 0,\\n 1,\\n 1,\\n 0,\\n 1,\\n 1,\\n 1,\\n 1,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0] == [1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1]\n  At index 0 diff: 0 != 1\n  Full diff:\n    [\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n     1,\n     1,\n     1,\n     1,\n  +  0,\n  +  0,\n  +  1,\n  +  1,\n  +  1,\n  +  0,\n  +  1,\n  +  1,\n  +  0,\n     1,\n     1,\n     1,\n     1,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  +  0,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n  -  1,\n    ]"
        },
        "traceback": [
          {
            "path": "test_pll.py",
            "lineno": 172,
            "message": "AssertionError"
          }
        ],
        "longrepr": "i2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\ntv = <utils.testvector.TestVector object at 0x7f91b0d9b0>\nfreq_setter = <utils.frequencysetter.FrequencySetter object at 0x7f91b0f588>\njson_metadata = {'auto_locks': [0, 0, 0, 0, 0, 0, ...], 'auto_vcos': [120, 120, 120, 120, 511, 120, ...], 'fc_locked': [0, 0, 0, 0, 0, 1, ...], 'frequencies_used': [280.0, 281.0, 282.0, 283.0, 284.0, 285.0, ...], ...}\nout_of_reset = None\nsupport_asic = <utils.support.Support object at 0x7f91b19b70>\nnormal_I2C_addresses = None, fc_basic_setup = None\nI2C_basic_settings_pre_alignment = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0... @`\\x80\\xa0\\xc0\\xe0\\x80\\x00\\x00\\x00\\x00 \\x92\\xaa\\xaa*\\xf3?\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\ntarget = 'ECOND', pll_freq_setup = None\n\n    @pytest.mark.skip_target(\"ECONT\")\n    @pytest.mark.pll_test\n    @pytest.mark.order('first')\n    def test_pllautolock(\n        i2c_asic,\n        tv,\n        freq_setter,\n        json_metadata,\n        out_of_reset,\n        support_asic,\n        normal_I2C_addresses,\n        fc_basic_setup,\n        I2C_basic_settings_pre_alignment,\n        target,\n        pll_freq_setup,\n    ):\n        \"\"\"\n        The test performs a scan of automatic PLL locking for each frequency step.\n        \"\"\"\n        # Frequency range\n        # FIXME: adjust these ranges at some point to more narrowly define the \"acceptable\" ranges\n        min_lo_nonFIB = 40.625\n        min_hi_nonFIB = 41.25\n        max_lo_nonFIB = 49.25\n        max_hi_nonFIB = 49.75\n    \n        if \"ECONT\" in target:\n            # FIXME change this\n            lo_freq = 40\n            hi_freq = 40\n    \n            min_lo = 40\n            min_hi = 40\n            max_lo = 40\n            max_hi = 40\n        else:\n            lo_freq = 35\n            hi_freq = 50\n    \n            # FIXME: adjust these ranges at some point to more narrowly define the \"acceptable\" ranges\n            min_lo = 35.5\n            min_hi = 36.5\n            max_lo = 43.5\n            max_hi = 44.5\n    \n        # Step size\n        freq_step = 1 / 8\n    \n        #ensure data coming in is prbs\n        tv.configure_prbs(\"PRBS15_32b\", header_mask=0)\n    \n        # We add freq_step to hi_freq so that we are sure to include the hi_freq\n        # endpoint without going any farther than hi_freq.\n        frequencies = 8 * np.arange(lo_freq, hi_freq + freq_step, freq_step)\n    \n        frequencies_used = []\n    \n        FC_locks = []\n    \n        pusm_states = []\n        lol_counts = []\n        auto_locks = []\n        auto_vcos = []\n        manual_vcos = []\n    \n        for f in frequencies:\n            logger.debug(f\"Frequency {f/8} MHz\")\n    \n            # set frequency\n            f_actual, is_new_frequency = freq_setter.set(f)\n            frequencies_used.append(f_actual)\n            support_asic.out_of_reset()\n    \n            # set run bit and other default configurations\n            i2c_asic.write_all(I2C_basic_settings_pre_alignment)\n            i2c_asic.target.configure({\"ClocksAndResets\": {\"Global\": {\"pusm_run\": 1}}})\n    \n            # is FC locked\n            FC_status = i2c_asic.read(\n                config={\"FCtrl\": {\"Global\": {\"locked\": None}}}, log=False\n            )\n            FC_locks.append(FC_status[\"FCtrl_Global_locked\"])\n    \n            if \"ECONT\" in target:\n                \"\"\"\n                In ECON-T-P1 we are not able to lock automatically\n                Thus, we override the CapBank and find the possible values that lock at that frequency\n                \"\"\"\n                i2c_asic.write(\n                    config={\"Pll\": {\"Global\": {\"enable_cap_bank_override\": 1}}},\n                    log=False,\n                    readback=False,\n                )\n    \n                freq_pusm_states = []\n                freq_lf_locks = []\n                freq_vco_capbanks = []\n                for capvalue in capbank_allowed:\n                    i2c_asic.write(\n                        config={\"Pll\": {\"Global\": {\"vco_cap_select\": int(capvalue)}}},\n                        log=False,\n                        readback=False,\n                    )\n    \n                    # is PLL locked\n                    pusm_state, lol_count, lf_lock, vco_capbank = i2c_asic.pllstatus_read(\n                        target\n                    )\n                    logger.debug(\n                        \"CapBank: {capvalue}, PUSM_State: {pusm_state}, LF_lock: {lf_lock}\"\n                    )\n    \n                    freq_pusm_states.append(pusm_state)\n                    freq_lf_locks.append(lf_lock)\n                    freq_vco_capbanks.append(vco_capbank)\n    \n                freq_pusm_states = np.array(freq_pusm_states)\n                freq_lf_locks = np.array(freq_lf_locks)\n                freq_vco_capbanks = np.array(freq_vco_capbanks)\n    \n                valid_vco = (freq_lf_locks == 1) & (freq_pusm_states == 9)\n    \n                # only append valid pusm state\n                # FIX ME - can change criteria to something different\n                pusm_states.append(9)\n                auto_locks.append(1 if np.any(valid_vco) else 0)\n                auto_vcos.append(list(freq_vco_capbanks[valid_vco]))\n    \n            else:\n                # In ECON-D and v2s we simply check if the PLL is locked\n                pusm_state, lol_count, lf_lock, vco_capbank = i2c_asic.pllstatus_read(\n                    target\n                )\n                pusm_states.append(pusm_state)\n                lol_counts.append(lol_count)\n                auto_locks.append(lf_lock)\n                auto_vcos.append(vco_capbank)\n    \n        json_metadata[\"frequencies_used\"] = frequencies_used\n    \n        json_metadata[\"fc_locked\"] = FC_locks\n    \n        json_metadata[\"pusm_states\"] = pusm_states\n        json_metadata[\"lol_counts\"] = lol_counts\n        json_metadata[\"auto_locks\"] = auto_locks\n        json_metadata[\"auto_vcos\"] = auto_vcos\n    \n>       assert FC_locks == [1] * len(FC_locks)\nE       assert [0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 1,\\n 1,\\n 1,\\n 1,\\n 0,\\n 0,\\n 1,\\n 1,\\n 1,\\n 0,\\n 1,\\n 1,\\n 0,\\n 1,\\n 1,\\n 1,\\n 1,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0,\\n 0] == [1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1,\\n 1]\nE         At index 0 diff: 0 != 1\nE         Full diff:\nE           [\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE            1,\nE            1,\nE            1,\nE            1,\nE         +  0,\nE         +  0,\nE         +  1,\nE         +  1,\nE         +  1,\nE         +  0,\nE         +  1,\nE         +  1,\nE         +  0,\nE            1,\nE            1,\nE            1,\nE            1,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         +  0,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE         -  1,\nE           ]\n\ntest_pll.py:172: AssertionError"
      },
      "teardown": {
        "duration": 0.004485601995838806,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_pll.py::test_pll_capbank_width",
      "lineno": 211,
      "outcome": "failed",
      "keywords": [
        "test_pll_capbank_width",
        "pytestmark",
        "order",
        "pll_test",
        "test_pll.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.09800962499866728,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.05489324599329848,
        "outcome": "failed",
        "crash": {
          "path": "/home/HGCAL_dev/mstamenk/econd-sw/test_bench/test_pll.py",
          "lineno": 279,
          "message": "AssertionError: Failed to achieve FC lock\nassert 0 == 1\n  +0\n  -1"
        },
        "traceback": [
          {
            "path": "test_pll.py",
            "lineno": 279,
            "message": "AssertionError"
          }
        ],
        "longrepr": "i2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\ntv = <utils.testvector.TestVector object at 0x7f91b0d9b0>\nnormal_frequency = 320.0, out_of_reset = None, normal_I2C_addresses = None\nwrite_ECON_I2C_basic_settings_pre_alignment = None, json_metadata = {}\ntarget = 'ECOND', pll_capbank_setup = None\n\n    @pytest.mark.pll_test\n    @pytest.mark.order('first')\n    def test_pll_capbank_width(\n        i2c_asic,\n        tv,\n        normal_frequency,\n        out_of_reset,\n        normal_I2C_addresses,\n        write_ECON_I2C_basic_settings_pre_alignment,\n        json_metadata,\n        target,\n        pll_capbank_setup,\n    ):\n        \"\"\"\n        The test performs a scan of pusm_state for allowed cap bank values.\n        Pll_capbank_with is calculated as:\n            The maximum continious width of cap bank select values at which pusm_state is FUNCTIONAL.\n        \"\"\"\n    \n        #ensure data coming in is prbs\n        tv.configure_prbs(\"PRBS15_32b\", header_mask=0)\n    \n        good_state = 9 if \"ECONT\" in target else 8\n    \n        pusm_states = []\n        lol_counts = []\n        pll_lock_state = []\n    \n        # set run bit\n        i2c_asic.target.configure({\"ClocksAndResets\": {\"Global\": {\"pusm_run\": 1}}})\n    \n        # override\n        if \"ECONT\" in target:\n            i2c_asic.write(\n                config={\"Pll\": {\"Global\": {\"enable_cap_bank_override\": 1}}},\n                log=False,\n                readback=False,\n            )\n        else:\n            i2c_asic.write(\n                config={\"ClocksAndResets\": {\"Global\": {\"enable_capbank_override\": 1}}},\n                log=False,\n                readback=False,\n            )\n    \n        # Loop over allowed cap bank vaues\n        for capvalue in capbank_allowed:\n            if \"ECONT\" in target:\n                i2c_asic.write(\n                    config={\"Pll\": {\"Global\": {\"vco_cap_select\": int(capvalue)}}},\n                    log=False,\n                    readback=False,\n                )\n            else:\n                i2c_asic.write(\n                    config={\n                        \"ClocksAndResets\": {\"Global\": {\"capbank_select\": int(capvalue)}}\n                    },\n                    log=False,\n                    readback=False,\n                )\n    \n            # is FC locked\n            FC_status = i2c_asic.read(\n                config={\"FCtrl\": {\"Global\": {\"locked\": None}}}, log=False\n            )\n    \n>           assert FC_status[\"FCtrl_Global_locked\"] == 1, \"Failed to achieve FC lock\"\nE           AssertionError: Failed to achieve FC lock\nE           assert 0 == 1\nE             +0\nE             -1\n\ntest_pll.py:279: AssertionError"
      },
      "teardown": {
        "duration": 0.0023001009976724163,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_pll.py::test_pll_lock",
      "lineno": 306,
      "outcome": "failed",
      "keywords": [
        "test_pll_lock",
        "pytestmark",
        "order",
        "test_pll.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.23600578799960203,
        "outcome": "passed"
      },
      "metadata": {
        "vco_capbank": 120,
        "ClocksAndResets_Global_lock_filter_locked": 0,
        "ClocksAndResets_Global_pusm_state": 3
      },
      "call": {
        "duration": 0.0188051790028112,
        "outcome": "failed",
        "crash": {
          "path": "/home/HGCAL_dev/mstamenk/econd-sw/test_bench/test_pll.py",
          "lineno": 362,
          "message": "assert 0 == 1\n  +0\n  -1"
        },
        "traceback": [
          {
            "path": "test_pll.py",
            "lineno": 362,
            "message": "AssertionError"
          }
        ],
        "longrepr": "out_of_reset = None, initial_setup = None\ntv = <utils.testvector.TestVector object at 0x7f91b0d9b0>\nwrite_ECON_I2C_basic_settings_pre_alignment = None, set_runbit_asic = None\ni2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\njson_metadata = {'ClocksAndResets_Global_lock_filter_locked': 0, 'ClocksAndResets_Global_pusm_state': 3, 'vco_capbank': 120}\nexpected_pusm_state = 8, target = 'ECOND'\n\n    @pytest.mark.order('first')\n    def test_pll_lock(\n        out_of_reset,\n        initial_setup,\n        tv,\n        write_ECON_I2C_basic_settings_pre_alignment,\n        set_runbit_asic,\n        i2c_asic,\n        json_metadata,\n        expected_pusm_state,\n        target):\n        \"\"\"\n        If we are fully set up, we should find that the PLL is locked and we are in\n        PUSM state 8.\n        \"\"\"\n        #ensure data coming in is prbs\n        tv.configure_prbs(\"PRBS15_32b\", header_mask=0)\n    \n        pllDict = {\"vco_capbank\":None, \"lock_filter_locked\":None, \"pusm_state\":None}\n        if target==\"ECOND\":\n            status = i2c_asic.read(\n            config={\n                \"ClocksAndResets\": {\n                    \"Global\": {\n                        \"pusm_state\": None,\n                        \"lock_filter_locked\": None,\n                        \"vco_capbank\": None,\n                    }\n                }\n            },\n            log=True,\n            )\n            pllDict[\"vco_capbank\"] = status[\"ClocksAndResets_Global_vco_capbank\"]\n            pllDict[\"lock_filter_locked\"] = status[\"ClocksAndResets_Global_lock_filter_locked\"]\n            pllDict[\"pusm_state\"] = status[\"ClocksAndResets_Global_pusm_state\"]\n        else:\n            status = i2c_asic.read(\n            config={\n                \"ClocksAndResets\": {\n                    \"Global\": {\n                        \"pusm_state\": None,\n                                       }\n                },\n                \"Pll\":{\"Global\":{\"lf_locked\":None, \"vco_cap_select\":None}},\n            },\n            log=True,\n            )\n            pllDict[\"vco_capbank\"] = status[\"Pll_Global_vco_cap_select\"]\n            pllDict[\"lock_filter_locked\"] =status[\"Pll_Global_lf_locked\"]\n            pllDict[\"pusm_state\"] =status[\"ClocksAndResets_Global_pusm_state\"]\n    \n        json_metadata[\"vco_capbank\"] = pllDict[\"vco_capbank\"]\n        json_metadata[\"ClocksAndResets_Global_lock_filter_locked\"] = pllDict[\"lock_filter_locked\"]\n        json_metadata[\"ClocksAndResets_Global_pusm_state\"] = pllDict[\"pusm_state\"]\n    \n>       assert pllDict[\"lock_filter_locked\"] == 1\nE       assert 0 == 1\nE         +0\nE         -1\n\ntest_pll.py:362: AssertionError"
      },
      "teardown": {
        "duration": 0.0015453009982593358,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_power.py::test_currentdraw_1p2V",
      "lineno": 23,
      "outcome": "failed",
      "keywords": [
        "test_currentdraw_1p2V",
        "pytestmark",
        "order",
        "test_power.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.46058853100112174,
        "outcome": "passed"
      },
      "metadata": {
        "power": 0.330862407579,
        "voltage": 1.203473,
        "current": 0.274923,
        "zynqTemp": 49.333576534416004,
        "PS_output_on": 1
      },
      "call": {
        "duration": 0.3810014350019628,
        "outcome": "failed",
        "crash": {
          "path": "/home/HGCAL_dev/mstamenk/econd-sw/test_bench/test_power.py",
          "lineno": 41,
          "message": "assert 0.274923 < 0.26"
        },
        "traceback": [
          {
            "path": "test_power.py",
            "lineno": 41,
            "message": "AssertionError"
          }
        ],
        "longrepr": "hard_reset = None\nread_power = <function read_power.<locals>.read at 0x7f91af62f0>\njson_metadata = {'PS_output_on': 1, 'current': 0.274923, 'power': 0.330862407579, 'voltage': 1.203473, ...}\ntarget = 'ECOND'\n\n    @pytest.mark.order(\"first\")\n    def test_currentdraw_1p2V(hard_reset, read_power, json_metadata, target):\n        p, voltage, current = read_power()\n    \n        temperature = checkZynqTemp()\n    \n        json_metadata[\"power\"] = voltage * current\n        json_metadata[\"voltage\"] = voltage\n        json_metadata[\"current\"] = current\n        json_metadata[\"zynqTemp\"] = temperature\n        json_metadata[\"PS_output_on\"] = p\n    \n        assert p == 1\n        assert voltage > 1.15\n        assert voltage < 1.25\n        if target=='ECOND':\n            assert current > 0.24\n>           assert current < 0.26\nE           assert 0.274923 < 0.26\n\ntest_power.py:41: AssertionError"
      },
      "teardown": {
        "duration": 0.001702620997093618,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_fc.py::test_fc_lock",
      "lineno": 2,
      "outcome": "failed",
      "keywords": [
        "test_fc_lock",
        "pytestmark",
        "order",
        "test_fc.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.00997038499917835,
        "outcome": "passed"
      },
      "metadata": {
        "FC_status": {
          "FCtrl_Global_locked": 0
        }
      },
      "call": {
        "duration": 0.01468221700633876,
        "outcome": "failed",
        "crash": {
          "path": "/home/HGCAL_dev/mstamenk/econd-sw/test_bench/test_fc.py",
          "lineno": 15,
          "message": "assert 0 == 1\n  +0\n  -1"
        },
        "traceback": [
          {
            "path": "test_fc.py",
            "lineno": 15,
            "message": "AssertionError"
          }
        ],
        "longrepr": "out_of_reset = None, initial_setup = None\ni2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\njson_metadata = {'FC_status': {'FCtrl_Global_locked': 0}}\n\n    @pytest.mark.order('second')\n    def test_fc_lock(\n        out_of_reset,\n        initial_setup,\n        i2c_asic,\n        json_metadata\n    ):\n        \"\"\"\n        If we are fully set up, we should find that the fast commands are locked.\n        \"\"\"\n        status = i2c_asic.read(config={\"FCtrl\": {\"Global\": {\"locked\": None}}}, log=False)\n        json_metadata[\"FC_status\"] = status\n>       assert status[\"FCtrl_Global_locked\"] == 1\nE       assert 0 == 1\nE         +0\nE         -1\n\ntest_fc.py:15: AssertionError"
      },
      "teardown": {
        "duration": 0.0012324910057941452,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_rw_allregisters[0]",
      "lineno": 54,
      "outcome": "passed",
      "keywords": [
        "test_rw_allregisters[0]",
        "pytestmark",
        "0",
        "parametrize",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.009122823990765028,
        "outcome": "passed"
      },
      "metadata": {
        "write_array": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        "read_array": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          65,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          255,
          0,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          65,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          255,
          0,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          65,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          255,
          0,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          65,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          255,
          0,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          65,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          255,
          0,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          65,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          255,
          0,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          65,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          255,
          0,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          65,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          255,
          0,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          65,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          255,
          0,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          65,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          255,
          0,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          65,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          255,
          0,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          65,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          255,
          0,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          128,
          0,
          0,
          0,
          128,
          0,
          0,
          0,
          128,
          0,
          0,
          0,
          128,
          0,
          0,
          0,
          128,
          0,
          0,
          0,
          128,
          0,
          0,
          0,
          128,
          0,
          0,
          0,
          128,
          0,
          0,
          0,
          128,
          0,
          0,
          0,
          128,
          0,
          0,
          0,
          128,
          0,
          0,
          0,
          128,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          15,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          240,
          31,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          60,
          15,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          207,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          48,
          0
        ],
        "mismatch_dict": {}
      },
      "call": {
        "duration": 0.17487637999875005,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.002526960990508087,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_rw_allregisters[255]",
      "lineno": 54,
      "outcome": "passed",
      "keywords": [
        "test_rw_allregisters[255]",
        "pytestmark",
        "255",
        "parametrize",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.008936583995819092,
        "outcome": "passed"
      },
      "metadata": {
        "write_array": [
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255
        ],
        "read_array": [
          127,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          131,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          127,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          131,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          127,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          131,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          127,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          131,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          127,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          131,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          127,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          131,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          127,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          131,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          127,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          131,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          127,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          131,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          127,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          131,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          127,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          131,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          127,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          131,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          63,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          0,
          0,
          7,
          255,
          15,
          63,
          255,
          15,
          0,
          0,
          0,
          255,
          255,
          7,
          0,
          15,
          255,
          255,
          63,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          3,
          0,
          0,
          0,
          0,
          0,
          0,
          3,
          128,
          244,
          31,
          0,
          63,
          63,
          63,
          63,
          63,
          63,
          63,
          63,
          63,
          63,
          63,
          63,
          63,
          63,
          63,
          0,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          0,
          0,
          255,
          255,
          63,
          255,
          63,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          60,
          15,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          15,
          63,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          255,
          15,
          255,
          15,
          255,
          15,
          255,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          31,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          3,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          255,
          255,
          127,
          0,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          255,
          31,
          0,
          0,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          3,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          3,
          255,
          255,
          255,
          255,
          255,
          255,
          31,
          255,
          255,
          255,
          255,
          255,
          31,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          127,
          207,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0
        ],
        "mismatch_dict": {}
      },
      "call": {
        "duration": 0.17365138899185695,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.002498942005331628,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_hard_reset_i2c_allregisters",
      "lineno": 91,
      "outcome": "passed",
      "keywords": [
        "test_hard_reset_i2c_allregisters",
        "pytestmark",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.008129194000503048,
        "outcome": "passed"
      },
      "metadata": {
        "read_array": [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          12,
          80,
          3,
          0,
          14,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          215,
          176,
          8,
          0,
          28,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          16,
          0,
          42,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          16,
          0,
          56,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          21,
          0,
          70,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          27,
          0,
          84,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          32,
          0,
          98,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          38,
          0,
          112,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          44,
          0,
          126,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          53,
          0,
          140,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          58,
          0,
          154,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          65,
          0,
          168,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          32,
          0,
          0,
          0,
          32,
          0,
          0,
          0,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          60,
          0,
          0,
          0,
          60,
          0,
          0,
          0,
          60,
          0,
          0,
          0,
          60,
          0,
          0,
          0,
          60,
          0,
          0,
          0,
          60,
          0,
          0,
          0,
          60,
          0,
          0,
          0,
          60,
          0,
          0,
          0,
          60,
          0,
          0,
          0,
          60,
          0,
          0,
          0,
          60,
          0,
          0,
          0,
          60,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          50,
          170,
          170,
          170,
          154,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          255,
          255,
          9,
          10,
          235,
          157,
          219,
          2,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          15,
          0,
          93,
          91,
          1,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          16,
          201,
          204,
          68,
          236,
          195,
          63,
          240,
          255,
          1,
          0,
          196,
          6,
          177,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          240,
          31,
          0,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          0,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          0,
          0,
          20,
          186,
          29,
          231,
          0,
          240,
          255,
          170,
          170,
          170,
          154,
          250,
          64,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          60,
          15,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          171,
          137,
          103,
          69,
          35,
          1,
          182,
          109,
          219,
          182,
          13,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          3,
          3,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          32,
          240,
          31,
          0,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          15,
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          32,
          64,
          96,
          128,
          160,
          192,
          224,
          128,
          0,
          0,
          0,
          0,
          32,
          146,
          170,
          170,
          42,
          243,
          63,
          207,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          152,
          0
        ],
        "mismatch_dict": {}
      },
      "call": {
        "duration": 0.1736304199876031,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0023135109950089827,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_soft_reset_i2c_allregisters",
      "lineno": 124,
      "outcome": "passed",
      "keywords": [
        "test_soft_reset_i2c_allregisters",
        "pytestmark",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.009548643996822648,
        "outcome": "passed"
      },
      "metadata": {
        "read_array": [
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          13,
          85,
          85,
          85,
          101,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          0,
          0,
          0,
          0,
          246,
          245,
          20,
          98,
          36,
          253,
          15,
          4,
          0,
          7,
          255,
          15,
          63,
          255,
          15,
          0,
          0,
          0,
          162,
          164,
          6,
          0,
          14,
          255,
          255,
          63,
          0,
          2,
          81,
          25,
          187,
          144,
          70,
          98,
          22,
          84,
          0,
          24,
          186,
          0,
          46,
          173,
          24,
          33,
          123,
          7,
          80,
          4,
          78,
          75,
          0,
          0,
          255,
          255,
          255,
          255,
          239,
          54,
          51,
          187,
          19,
          60,
          192,
          15,
          0,
          254,
          255,
          59,
          249,
          78,
          254,
          3,
          0,
          0,
          0,
          0,
          0,
          0,
          8,
          128,
          13,
          30,
          0,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          0,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          0,
          0,
          235,
          69,
          34,
          24,
          63,
          15,
          0,
          85,
          85,
          85,
          101,
          5,
          191,
          255,
          0,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          128,
          128,
          128,
          128,
          128,
          128,
          128,
          128,
          128,
          128,
          128,
          128,
          28,
          60,
          79,
          145,
          226,
          9,
          235,
          96,
          2,
          128,
          1,
          0,
          15,
          63,
          84,
          118,
          152,
          186,
          220,
          254,
          73,
          146,
          36,
          73,
          2,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          255,
          15,
          255,
          15,
          255,
          15,
          252,
          252,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          31,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          3,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          0,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          0,
          0,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          3,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          3,
          255,
          255,
          255,
          255,
          255,
          255,
          31,
          255,
          255,
          255,
          255,
          255,
          31,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          223,
          191,
          159,
          127,
          95,
          63,
          31,
          127,
          255,
          255,
          255,
          255,
          223,
          109,
          85,
          85,
          213,
          12,
          64,
          207,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0
        ],
        "mismatch_dict": {}
      },
      "call": {
        "duration": 0.17439847999776248,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.002338320991839282,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_wrong_reg_address",
      "lineno": 157,
      "outcome": "passed",
      "keywords": [
        "test_wrong_reg_address",
        "pytestmark",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.0074103329970967025,
        "outcome": "passed"
      },
      "metadata": {
        "read_content": 0
      },
      "call": {
        "duration": 0.002194650995079428,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0012568800011649728,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_alladdresses[0]",
      "lineno": 189,
      "outcome": "passed",
      "keywords": [
        "test_alladdresses[0]",
        "pytestmark",
        "0",
        "parametrize",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.006567663003806956,
        "outcome": "passed"
      },
      "metadata": {
        "runbit_value": 1
      },
      "call": {
        "duration": 0.026419992005685344,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0021322209940990433,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_alladdresses[1]",
      "lineno": 189,
      "outcome": "passed",
      "keywords": [
        "test_alladdresses[1]",
        "pytestmark",
        "1",
        "parametrize",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.007357654001680203,
        "outcome": "passed"
      },
      "metadata": {
        "runbit_value": 1
      },
      "call": {
        "duration": 0.026789862997247837,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.002172000997234136,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_alladdresses[2]",
      "lineno": 189,
      "outcome": "passed",
      "keywords": [
        "test_alladdresses[2]",
        "pytestmark",
        "2",
        "parametrize",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.0066406229889253154,
        "outcome": "passed"
      },
      "metadata": {
        "runbit_value": 1
      },
      "call": {
        "duration": 0.026256311990437098,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.002168281003832817,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_alladdresses[3]",
      "lineno": 189,
      "outcome": "passed",
      "keywords": [
        "test_alladdresses[3]",
        "pytestmark",
        "3",
        "parametrize",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.00662610300059896,
        "outcome": "passed"
      },
      "metadata": {
        "runbit_value": 1
      },
      "call": {
        "duration": 0.026057381997816265,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.00215880099858623,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_alladdresses[4]",
      "lineno": 189,
      "outcome": "passed",
      "keywords": [
        "test_alladdresses[4]",
        "pytestmark",
        "4",
        "parametrize",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.0066039330122293904,
        "outcome": "passed"
      },
      "metadata": {
        "runbit_value": 1
      },
      "call": {
        "duration": 0.02602726199256722,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.002132580993929878,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_alladdresses[5]",
      "lineno": 189,
      "outcome": "passed",
      "keywords": [
        "test_alladdresses[5]",
        "pytestmark",
        "5",
        "parametrize",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.007223284002975561,
        "outcome": "passed"
      },
      "metadata": {
        "runbit_value": 1
      },
      "call": {
        "duration": 0.026774443002068438,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0021848110045539215,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_alladdresses[6]",
      "lineno": 189,
      "outcome": "passed",
      "keywords": [
        "test_alladdresses[6]",
        "pytestmark",
        "6",
        "parametrize",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.00663156301015988,
        "outcome": "passed"
      },
      "metadata": {
        "runbit_value": 1
      },
      "call": {
        "duration": 0.02607412199722603,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0021622209897032008,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_alladdresses[7]",
      "lineno": 189,
      "outcome": "passed",
      "keywords": [
        "test_alladdresses[7]",
        "pytestmark",
        "7",
        "parametrize",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.006618033003178425,
        "outcome": "passed"
      },
      "metadata": {
        "runbit_value": 1
      },
      "call": {
        "duration": 0.02603953200741671,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.002161921001970768,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_alladdresses[8]",
      "lineno": 189,
      "outcome": "passed",
      "keywords": [
        "test_alladdresses[8]",
        "pytestmark",
        "8",
        "parametrize",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.0071481030026916414,
        "outcome": "passed"
      },
      "metadata": {
        "runbit_value": 1
      },
      "call": {
        "duration": 0.026779121995787136,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0021394809882622212,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_alladdresses[9]",
      "lineno": 189,
      "outcome": "passed",
      "keywords": [
        "test_alladdresses[9]",
        "pytestmark",
        "9",
        "parametrize",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.006625772992265411,
        "outcome": "passed"
      },
      "metadata": {
        "runbit_value": 1
      },
      "call": {
        "duration": 0.025981481987400912,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0021288909920258448,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_alladdresses[10]",
      "lineno": 189,
      "outcome": "passed",
      "keywords": [
        "test_alladdresses[10]",
        "pytestmark",
        "10",
        "parametrize",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.006606932991417125,
        "outcome": "passed"
      },
      "metadata": {
        "runbit_value": 1
      },
      "call": {
        "duration": 0.026366861988208257,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0021517809946089983,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_alladdresses[11]",
      "lineno": 189,
      "outcome": "passed",
      "keywords": [
        "test_alladdresses[11]",
        "pytestmark",
        "11",
        "parametrize",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.006614042998990044,
        "outcome": "passed"
      },
      "metadata": {
        "runbit_value": 1
      },
      "call": {
        "duration": 0.026067822007462382,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0021573909907601774,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_alladdresses[12]",
      "lineno": 189,
      "outcome": "passed",
      "keywords": [
        "test_alladdresses[12]",
        "pytestmark",
        "12",
        "parametrize",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.007200032996479422,
        "outcome": "passed"
      },
      "metadata": {
        "runbit_value": 1
      },
      "call": {
        "duration": 0.02670058199146297,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.002139691001502797,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_alladdresses[13]",
      "lineno": 189,
      "outcome": "passed",
      "keywords": [
        "test_alladdresses[13]",
        "pytestmark",
        "13",
        "parametrize",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.006625113004702143,
        "outcome": "passed"
      },
      "metadata": {
        "runbit_value": 1
      },
      "call": {
        "duration": 0.026019132012152113,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0021313509932952,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_alladdresses[14]",
      "lineno": 189,
      "outcome": "passed",
      "keywords": [
        "test_alladdresses[14]",
        "pytestmark",
        "14",
        "parametrize",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.00660015300672967,
        "outcome": "passed"
      },
      "metadata": {
        "runbit_value": 1
      },
      "call": {
        "duration": 0.026108832011232153,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.002157900991733186,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_alladdresses[15]",
      "lineno": 189,
      "outcome": "passed",
      "keywords": [
        "test_alladdresses[15]",
        "pytestmark",
        "15",
        "parametrize",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.007195712998509407,
        "outcome": "passed"
      },
      "metadata": {
        "runbit_value": 1
      },
      "call": {
        "duration": 0.02684299199609086,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0021543010079767555,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_wrong_i2c_address",
      "lineno": 218,
      "outcome": "passed",
      "keywords": [
        "test_wrong_i2c_address",
        "pytestmark",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.007927714003017172,
        "outcome": "passed"
      },
      "metadata": {
        "wrong_address": 16
      },
      "call": {
        "duration": 0.0036713719891849905,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0022157409985084087,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_hold_hard_reset",
      "lineno": 233,
      "outcome": "passed",
      "keywords": [
        "test_hold_hard_reset",
        "pytestmark",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.005273132002912462,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.0016166109999176115,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0009519309969618917,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_hold_soft_reset",
      "lineno": 244,
      "outcome": "passed",
      "keywords": [
        "test_hold_soft_reset",
        "pytestmark",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.006971192997298203,
        "outcome": "passed"
      },
      "metadata": {
        "read_array": [
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          2,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          2,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          2,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          2,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          2,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          2,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          2,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          2,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          2,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          2,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          2,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          2,
          32,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          13,
          85,
          85,
          85,
          101,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          0,
          0,
          0,
          0,
          246,
          245,
          20,
          98,
          36,
          253,
          15,
          0,
          0,
          7,
          255,
          15,
          63,
          0,
          0,
          0,
          0,
          0,
          162,
          164,
          6,
          0,
          14,
          255,
          255,
          63,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          255,
          255,
          239,
          54,
          51,
          187,
          19,
          60,
          192,
          15,
          0,
          254,
          255,
          59,
          249,
          78,
          254,
          3,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          240,
          31,
          0,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          0,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          0,
          0,
          235,
          69,
          34,
          24,
          63,
          15,
          0,
          85,
          85,
          85,
          101,
          5,
          191,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          60,
          15,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          15,
          63,
          84,
          118,
          152,
          186,
          220,
          254,
          73,
          146,
          36,
          73,
          2,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          255,
          15,
          255,
          15,
          255,
          15,
          252,
          252,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          31,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          3,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          0,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          0,
          0,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          3,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          3,
          255,
          255,
          255,
          255,
          255,
          255,
          31,
          255,
          255,
          255,
          255,
          255,
          31,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          223,
          191,
          159,
          127,
          95,
          63,
          31,
          127,
          255,
          255,
          255,
          255,
          223,
          109,
          85,
          85,
          213,
          12,
          64,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0
        ],
        "mismatch_dict": {}
      },
      "call": {
        "duration": 0.17426431900821626,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.001357261004159227,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_chip_sync",
      "lineno": 278,
      "outcome": "passed",
      "keywords": [
        "test_chip_sync",
        "pytestmark",
        "order",
        "test_i2c.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.02194087000680156,
        "outcome": "passed"
      },
      "metadata": {
        "read_array": [
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          126,
          255,
          255,
          127,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          128,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          127,
          188,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          13,
          85,
          85,
          85,
          101,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          0,
          0,
          0,
          0,
          246,
          245,
          20,
          98,
          36,
          253,
          15,
          6,
          0,
          7,
          255,
          15,
          63,
          255,
          15,
          0,
          0,
          0,
          162,
          164,
          6,
          0,
          14,
          255,
          255,
          63,
          2,
          13,
          62,
          52,
          105,
          143,
          54,
          159,
          120,
          95,
          0,
          88,
          199,
          4,
          155,
          228,
          93,
          190,
          47,
          22,
          233,
          0,
          65,
          116,
          0,
          0,
          255,
          255,
          255,
          255,
          239,
          54,
          51,
          187,
          19,
          60,
          192,
          15,
          0,
          254,
          255,
          59,
          249,
          78,
          254,
          3,
          0,
          0,
          0,
          0,
          0,
          0,
          136,
          128,
          13,
          30,
          0,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          58,
          0,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          249,
          25,
          0,
          0,
          235,
          69,
          34,
          24,
          63,
          15,
          0,
          85,
          85,
          85,
          101,
          5,
          191,
          255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          128,
          128,
          128,
          128,
          128,
          128,
          128,
          128,
          128,
          128,
          128,
          128,
          28,
          58,
          171,
          108,
          160,
          173,
          91,
          2,
          2,
          0,
          12,
          0,
          15,
          63,
          84,
          118,
          152,
          186,
          220,
          254,
          73,
          146,
          36,
          73,
          2,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          255,
          15,
          255,
          15,
          255,
          15,
          252,
          252,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          31,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          3,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          223,
          15,
          96,
          0,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          240,
          29,
          0,
          0,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          3,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          3,
          255,
          255,
          255,
          255,
          255,
          255,
          31,
          255,
          255,
          255,
          255,
          255,
          31,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          255,
          15,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          223,
          191,
          159,
          127,
          95,
          63,
          31,
          127,
          255,
          255,
          255,
          255,
          223,
          109,
          85,
          85,
          213,
          12,
          64,
          207,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0
        ],
        "mismatch_dict": {}
      },
      "call": {
        "duration": 0.17553053000301588,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.00248550099786371,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_ePortRXPRBS",
      "lineno": 145,
      "outcome": "error",
      "keywords": [
        "test_ePortRXPRBS",
        "pytestmark",
        "order",
        "test_io.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.8224737760028802,
        "outcome": "failed",
        "crash": {
          "path": "../utils/align.py",
          "lineno": 209,
          "message": "RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]"
        },
        "traceback": [
          {
            "path": "../common_pytest/fixtures.py",
            "lineno": 488,
            "message": ""
          },
          {
            "path": "../common_pytest/fixtures_utils.py",
            "lineno": 263,
            "message": "in word_align"
          },
          {
            "path": "../utils/align.py",
            "lineno": 209,
            "message": "RuntimeError"
          }
        ],
        "log": [
          {
            "name": "econ_i2c_ASIC",
            "msg": "Failed to get good channel phase select after roughly 0.001 s",
            "args": null,
            "levelname": "WARNING",
            "levelno": 30,
            "pathname": "../econ_i2c.py",
            "filename": "econ_i2c.py",
            "module": "econ_i2c",
            "exc_info": null,
            "exc_text": null,
            "stack_info": null,
            "lineno": 547,
            "funcName": "train_channel",
            "created": 1713408562.358884,
            "msecs": 358.8840961456299,
            "relativeCreated": 30943.560361862183,
            "thread": 548174635008,
            "threadName": "MainThread",
            "processName": "MainProcess",
            "process": 11431,
            "asctime": "2024-04-17 21:49:22"
          },
          {
            "name": "utils.align",
            "msg": "Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]",
            "args": null,
            "levelname": "ERROR",
            "levelno": 40,
            "pathname": "../utils/align.py",
            "filename": "align.py",
            "module": "align",
            "exc_info": null,
            "exc_text": null,
            "stack_info": null,
            "lineno": 206,
            "funcName": "word_align",
            "created": 1713408562.95872,
            "msecs": 958.7199687957764,
            "relativeCreated": 31543.39623451233,
            "thread": 548174635008,
            "threadName": "MainThread",
            "processName": "MainProcess",
            "process": 11431,
            "asctime": "2024-04-17 21:49:22"
          }
        ],
        "longrepr": "initial_setup = None\nI2C_basic_settings_pre_alignment = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0... @`\\x80\\xa0\\xc0\\xe0\\x80\\x00\\x00\\x00\\x00 \\x92\\xaa\\xaa*\\xf3?\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\ni2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\ntv = <utils.testvector.TestVector object at 0x7f91b0d9b0>\ngen = <utils.packetgenerator.PacketGenerator object at 0x7f9178dd30>\nroc_version = 'v3', align_pattern = 12273810550690239914\naligner = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\ntarget = 'ECOND'\n\n    @pytest.fixture(scope=\"session\")\n    def initial_word_align(\n        initial_setup,\n        I2C_basic_settings_pre_alignment,\n        i2c_asic,\n        tv,\n        gen,\n        roc_version,\n        align_pattern,\n        aligner,\n        load_val,\n        target,\n    ):\n        \"\"\"\n        Align the ASIC\n        \"\"\"\n        i2c_asic.write_all(I2C_basic_settings_pre_alignment)\n        i2c_asic.target.configure(runbit_set_config)\n    \n        if gen:\n            gen.set_global(\"bypass\", 1)\n        tv.configure_prbs(\"PRBS15_32b\", header_mask=0)\n        i2c_asic.train_channel()\n    \n        tv.write(\"n_idle_words\", 256)\n        tv.write(\"idle_word\", align_pattern >> 32)\n        tv.write(\"idle_word_BX0\", align_pattern & 0xFFFFFFFF)\n    \n        if \"ECOND\" in target:\n            gen.set_global(\"bypass\", 0)\n            gen.setup_roc(roc=roc_version)\n            gen.set_global(\"IdleFrame\", align_pattern & 0xFFFFFFF)\n            bx_offset = gen.read_global(\"Bx_offset\")\n            logging.debug(\n                f\"ROC DAQ packet generator active, bx_offset: 0x{bx_offset:02x}, load_val: {load_val}\"\n            )\n    \n>       new_snap_bx = word_align(align_pattern, aligner, load_val, active_erx_align[target])\n\n../common_pytest/fixtures.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../common_pytest/fixtures_utils.py:263: in word_align\n    active_erx=active_erx,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\nsnapshot_bxs = [5, 3, 0, 6, 7, 4, ...], align_pattern = 12273810550690239914\nactive_erx = 63, read_snapshot = True, i2c_setup = False\n\n    def word_align(\n        self,\n        load_val,\n        snapshot_bxs,\n        align_pattern=0xA555555595555555,\n        active_erx=0xFFF,\n        read_snapshot=True,\n        i2c_setup=True,\n    ):\n        \"\"\"\n        Automatic word alignment\n    \n        :param load_val: Value that the internal ECON BX counter resets to when it receives a BCR\n        :type load_val: int\n        :param snapshot_bxs: BX counters (internal to ECON) at which to take the snapshot\n        :type snapshot_bxs: tuple(int)\n        \"\"\"\n    \n        self.logger.info(\"Starting automatic word alignment \\n\")\n    \n        self.fc.basic_setup()\n    \n        if i2c_setup:\n            # configure Automatic Alignment mode\n            self.i2c.write(\n                config={\n                    \"Aligner\": {\n                        \"Global\": {\n                            \"match_pattern_val\": align_pattern,\n                            \"match_mask_val\": 0,\n                            \"i2c_snapshot_en\": 0,\n                            \"snapshot_en\": 1,\n                            \"snapshot_arm\": 0,\n                            \"orbsyn_cnt_max_val\": 3563,\n                            \"orbsyn_cnt_load_val\": load_val,\n                        }\n                    },\n                    \"ChAligner\": {\n                        i: {\n                            \"per_ch_align_en\": 1,\n                            \"sel_override_en\": 0,\n                            \"patt_en\": 0,\n                            \"prbs28_en\": 0,\n                            \"prbs_chk_en\": 0,\n                        }\n                        for i in range(12)\n                    },\n                },\n                log=False,\n                readback=False,\n            )\n            if \"ECOND\" in self.i2c.name:\n                self.i2c.write(\n                    config={\n                        \"RocDaqCtrl\": {\n                            \"Global\": {\n                                \"active_erxs\": active_erx,\n                            }\n                        },\n                    },\n                    log=False,\n                    readback=False,\n                )\n    \n        align_status = False\n        for bx in snapshot_bxs:\n            self.logger.info(f\"Set snapshot bx: {bx}\")\n            # configure snapshot BX\n            self.i2c.write(\n                config={\"Aligner\": {\"Global\": {\"orbsyn_cnt_snapshot\": bx}}},\n                log=True,\n                readback=False,\n            )\n    \n            # send FC\n            if \"ECOND\" in self.target:\n                self.fc.send(\"link_reset_rocd\")\n            else:\n                self.fc.send(\"link_reset_roct\")\n    \n            # check alignment\n            align_status = self.is_word_align(align_pattern, read_snapshot, active_erx)\n            if align_status:\n                self.logger.info(f\"Successful word alignment, snapshot bx: {bx}\")\n                return bx\n    \n        if not align_status:\n            self.logger.error(\n                f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\n            raise RuntimeError(\n>               f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\nE           RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]\n\n../utils/align.py:209: RuntimeError"
      },
      "teardown": {
        "duration": 0.0009205799869960174,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_eTX_delayscan",
      "lineno": 176,
      "outcome": "error",
      "keywords": [
        "test_eTX_delayscan",
        "pytestmark",
        "order",
        "test_io.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.00917709399072919,
        "outcome": "failed",
        "crash": {
          "path": "../utils/align.py",
          "lineno": 209,
          "message": "RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]"
        },
        "traceback": [
          {
            "path": "../common_pytest/fixtures.py",
            "lineno": 488,
            "message": ""
          },
          {
            "path": "../common_pytest/fixtures_utils.py",
            "lineno": 263,
            "message": "in word_align"
          },
          {
            "path": "../utils/align.py",
            "lineno": 209,
            "message": "RuntimeError"
          }
        ],
        "longrepr": "initial_setup = None\nI2C_basic_settings_pre_alignment = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0... @`\\x80\\xa0\\xc0\\xe0\\x80\\x00\\x00\\x00\\x00 \\x92\\xaa\\xaa*\\xf3?\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\ni2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\ntv = <utils.testvector.TestVector object at 0x7f91b0d9b0>\ngen = <utils.packetgenerator.PacketGenerator object at 0x7f9178dd30>\nroc_version = 'v3', align_pattern = 12273810550690239914\naligner = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\ntarget = 'ECOND'\n\n    @pytest.fixture(scope=\"session\")\n    def initial_word_align(\n        initial_setup,\n        I2C_basic_settings_pre_alignment,\n        i2c_asic,\n        tv,\n        gen,\n        roc_version,\n        align_pattern,\n        aligner,\n        load_val,\n        target,\n    ):\n        \"\"\"\n        Align the ASIC\n        \"\"\"\n        i2c_asic.write_all(I2C_basic_settings_pre_alignment)\n        i2c_asic.target.configure(runbit_set_config)\n    \n        if gen:\n            gen.set_global(\"bypass\", 1)\n        tv.configure_prbs(\"PRBS15_32b\", header_mask=0)\n        i2c_asic.train_channel()\n    \n        tv.write(\"n_idle_words\", 256)\n        tv.write(\"idle_word\", align_pattern >> 32)\n        tv.write(\"idle_word_BX0\", align_pattern & 0xFFFFFFFF)\n    \n        if \"ECOND\" in target:\n            gen.set_global(\"bypass\", 0)\n            gen.setup_roc(roc=roc_version)\n            gen.set_global(\"IdleFrame\", align_pattern & 0xFFFFFFF)\n            bx_offset = gen.read_global(\"Bx_offset\")\n            logging.debug(\n                f\"ROC DAQ packet generator active, bx_offset: 0x{bx_offset:02x}, load_val: {load_val}\"\n            )\n    \n>       new_snap_bx = word_align(align_pattern, aligner, load_val, active_erx_align[target])\n\n../common_pytest/fixtures.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../common_pytest/fixtures_utils.py:263: in word_align\n    active_erx=active_erx,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\nsnapshot_bxs = [5, 3, 0, 6, 7, 4, ...], align_pattern = 12273810550690239914\nactive_erx = 63, read_snapshot = True, i2c_setup = False\n\n    def word_align(\n        self,\n        load_val,\n        snapshot_bxs,\n        align_pattern=0xA555555595555555,\n        active_erx=0xFFF,\n        read_snapshot=True,\n        i2c_setup=True,\n    ):\n        \"\"\"\n        Automatic word alignment\n    \n        :param load_val: Value that the internal ECON BX counter resets to when it receives a BCR\n        :type load_val: int\n        :param snapshot_bxs: BX counters (internal to ECON) at which to take the snapshot\n        :type snapshot_bxs: tuple(int)\n        \"\"\"\n    \n        self.logger.info(\"Starting automatic word alignment \\n\")\n    \n        self.fc.basic_setup()\n    \n        if i2c_setup:\n            # configure Automatic Alignment mode\n            self.i2c.write(\n                config={\n                    \"Aligner\": {\n                        \"Global\": {\n                            \"match_pattern_val\": align_pattern,\n                            \"match_mask_val\": 0,\n                            \"i2c_snapshot_en\": 0,\n                            \"snapshot_en\": 1,\n                            \"snapshot_arm\": 0,\n                            \"orbsyn_cnt_max_val\": 3563,\n                            \"orbsyn_cnt_load_val\": load_val,\n                        }\n                    },\n                    \"ChAligner\": {\n                        i: {\n                            \"per_ch_align_en\": 1,\n                            \"sel_override_en\": 0,\n                            \"patt_en\": 0,\n                            \"prbs28_en\": 0,\n                            \"prbs_chk_en\": 0,\n                        }\n                        for i in range(12)\n                    },\n                },\n                log=False,\n                readback=False,\n            )\n            if \"ECOND\" in self.i2c.name:\n                self.i2c.write(\n                    config={\n                        \"RocDaqCtrl\": {\n                            \"Global\": {\n                                \"active_erxs\": active_erx,\n                            }\n                        },\n                    },\n                    log=False,\n                    readback=False,\n                )\n    \n        align_status = False\n        for bx in snapshot_bxs:\n            self.logger.info(f\"Set snapshot bx: {bx}\")\n            # configure snapshot BX\n            self.i2c.write(\n                config={\"Aligner\": {\"Global\": {\"orbsyn_cnt_snapshot\": bx}}},\n                log=True,\n                readback=False,\n            )\n    \n            # send FC\n            if \"ECOND\" in self.target:\n                self.fc.send(\"link_reset_rocd\")\n            else:\n                self.fc.send(\"link_reset_roct\")\n    \n            # check alignment\n            align_status = self.is_word_align(align_pattern, read_snapshot, active_erx)\n            if align_status:\n                self.logger.info(f\"Successful word alignment, snapshot bx: {bx}\")\n                return bx\n    \n        if not align_status:\n            self.logger.error(\n                f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\n            raise RuntimeError(\n>               f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\nE           RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]\n\n../utils/align.py:209: RuntimeError"
      },
      "teardown": {
        "duration": 0.0008922609995352104,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_eTx_PRBS7",
      "lineno": 221,
      "outcome": "error",
      "keywords": [
        "test_eTx_PRBS7",
        "pytestmark",
        "skip_target",
        "order",
        "test_io.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.010413634998258203,
        "outcome": "failed",
        "crash": {
          "path": "../utils/align.py",
          "lineno": 209,
          "message": "RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]"
        },
        "traceback": [
          {
            "path": "../common_pytest/fixtures.py",
            "lineno": 488,
            "message": ""
          },
          {
            "path": "../common_pytest/fixtures_utils.py",
            "lineno": 263,
            "message": "in word_align"
          },
          {
            "path": "../utils/align.py",
            "lineno": 209,
            "message": "RuntimeError"
          }
        ],
        "longrepr": "initial_setup = None\nI2C_basic_settings_pre_alignment = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0... @`\\x80\\xa0\\xc0\\xe0\\x80\\x00\\x00\\x00\\x00 \\x92\\xaa\\xaa*\\xf3?\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\ni2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\ntv = <utils.testvector.TestVector object at 0x7f91b0d9b0>\ngen = <utils.packetgenerator.PacketGenerator object at 0x7f9178dd30>\nroc_version = 'v3', align_pattern = 12273810550690239914\naligner = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\ntarget = 'ECOND'\n\n    @pytest.fixture(scope=\"session\")\n    def initial_word_align(\n        initial_setup,\n        I2C_basic_settings_pre_alignment,\n        i2c_asic,\n        tv,\n        gen,\n        roc_version,\n        align_pattern,\n        aligner,\n        load_val,\n        target,\n    ):\n        \"\"\"\n        Align the ASIC\n        \"\"\"\n        i2c_asic.write_all(I2C_basic_settings_pre_alignment)\n        i2c_asic.target.configure(runbit_set_config)\n    \n        if gen:\n            gen.set_global(\"bypass\", 1)\n        tv.configure_prbs(\"PRBS15_32b\", header_mask=0)\n        i2c_asic.train_channel()\n    \n        tv.write(\"n_idle_words\", 256)\n        tv.write(\"idle_word\", align_pattern >> 32)\n        tv.write(\"idle_word_BX0\", align_pattern & 0xFFFFFFFF)\n    \n        if \"ECOND\" in target:\n            gen.set_global(\"bypass\", 0)\n            gen.setup_roc(roc=roc_version)\n            gen.set_global(\"IdleFrame\", align_pattern & 0xFFFFFFF)\n            bx_offset = gen.read_global(\"Bx_offset\")\n            logging.debug(\n                f\"ROC DAQ packet generator active, bx_offset: 0x{bx_offset:02x}, load_val: {load_val}\"\n            )\n    \n>       new_snap_bx = word_align(align_pattern, aligner, load_val, active_erx_align[target])\n\n../common_pytest/fixtures.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../common_pytest/fixtures_utils.py:263: in word_align\n    active_erx=active_erx,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\nsnapshot_bxs = [5, 3, 0, 6, 7, 4, ...], align_pattern = 12273810550690239914\nactive_erx = 63, read_snapshot = True, i2c_setup = False\n\n    def word_align(\n        self,\n        load_val,\n        snapshot_bxs,\n        align_pattern=0xA555555595555555,\n        active_erx=0xFFF,\n        read_snapshot=True,\n        i2c_setup=True,\n    ):\n        \"\"\"\n        Automatic word alignment\n    \n        :param load_val: Value that the internal ECON BX counter resets to when it receives a BCR\n        :type load_val: int\n        :param snapshot_bxs: BX counters (internal to ECON) at which to take the snapshot\n        :type snapshot_bxs: tuple(int)\n        \"\"\"\n    \n        self.logger.info(\"Starting automatic word alignment \\n\")\n    \n        self.fc.basic_setup()\n    \n        if i2c_setup:\n            # configure Automatic Alignment mode\n            self.i2c.write(\n                config={\n                    \"Aligner\": {\n                        \"Global\": {\n                            \"match_pattern_val\": align_pattern,\n                            \"match_mask_val\": 0,\n                            \"i2c_snapshot_en\": 0,\n                            \"snapshot_en\": 1,\n                            \"snapshot_arm\": 0,\n                            \"orbsyn_cnt_max_val\": 3563,\n                            \"orbsyn_cnt_load_val\": load_val,\n                        }\n                    },\n                    \"ChAligner\": {\n                        i: {\n                            \"per_ch_align_en\": 1,\n                            \"sel_override_en\": 0,\n                            \"patt_en\": 0,\n                            \"prbs28_en\": 0,\n                            \"prbs_chk_en\": 0,\n                        }\n                        for i in range(12)\n                    },\n                },\n                log=False,\n                readback=False,\n            )\n            if \"ECOND\" in self.i2c.name:\n                self.i2c.write(\n                    config={\n                        \"RocDaqCtrl\": {\n                            \"Global\": {\n                                \"active_erxs\": active_erx,\n                            }\n                        },\n                    },\n                    log=False,\n                    readback=False,\n                )\n    \n        align_status = False\n        for bx in snapshot_bxs:\n            self.logger.info(f\"Set snapshot bx: {bx}\")\n            # configure snapshot BX\n            self.i2c.write(\n                config={\"Aligner\": {\"Global\": {\"orbsyn_cnt_snapshot\": bx}}},\n                log=True,\n                readback=False,\n            )\n    \n            # send FC\n            if \"ECOND\" in self.target:\n                self.fc.send(\"link_reset_rocd\")\n            else:\n                self.fc.send(\"link_reset_roct\")\n    \n            # check alignment\n            align_status = self.is_word_align(align_pattern, read_snapshot, active_erx)\n            if align_status:\n                self.logger.info(f\"Successful word alignment, snapshot bx: {bx}\")\n                return bx\n    \n        if not align_status:\n            self.logger.error(\n                f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\n            raise RuntimeError(\n>               f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\nE           RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]\n\n../utils/align.py:209: RuntimeError"
      },
      "teardown": {
        "duration": 0.0008882109978003427,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_alignment_erx",
      "lineno": 302,
      "outcome": "error",
      "keywords": [
        "test_alignment_erx",
        "pytestmark",
        "order",
        "test_io.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.009088534003240056,
        "outcome": "failed",
        "crash": {
          "path": "../utils/align.py",
          "lineno": 209,
          "message": "RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]"
        },
        "traceback": [
          {
            "path": "../common_pytest/fixtures.py",
            "lineno": 488,
            "message": ""
          },
          {
            "path": "../common_pytest/fixtures_utils.py",
            "lineno": 263,
            "message": "in word_align"
          },
          {
            "path": "../utils/align.py",
            "lineno": 209,
            "message": "RuntimeError"
          }
        ],
        "longrepr": "initial_setup = None\nI2C_basic_settings_pre_alignment = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0... @`\\x80\\xa0\\xc0\\xe0\\x80\\x00\\x00\\x00\\x00 \\x92\\xaa\\xaa*\\xf3?\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\ni2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\ntv = <utils.testvector.TestVector object at 0x7f91b0d9b0>\ngen = <utils.packetgenerator.PacketGenerator object at 0x7f9178dd30>\nroc_version = 'v3', align_pattern = 12273810550690239914\naligner = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\ntarget = 'ECOND'\n\n    @pytest.fixture(scope=\"session\")\n    def initial_word_align(\n        initial_setup,\n        I2C_basic_settings_pre_alignment,\n        i2c_asic,\n        tv,\n        gen,\n        roc_version,\n        align_pattern,\n        aligner,\n        load_val,\n        target,\n    ):\n        \"\"\"\n        Align the ASIC\n        \"\"\"\n        i2c_asic.write_all(I2C_basic_settings_pre_alignment)\n        i2c_asic.target.configure(runbit_set_config)\n    \n        if gen:\n            gen.set_global(\"bypass\", 1)\n        tv.configure_prbs(\"PRBS15_32b\", header_mask=0)\n        i2c_asic.train_channel()\n    \n        tv.write(\"n_idle_words\", 256)\n        tv.write(\"idle_word\", align_pattern >> 32)\n        tv.write(\"idle_word_BX0\", align_pattern & 0xFFFFFFFF)\n    \n        if \"ECOND\" in target:\n            gen.set_global(\"bypass\", 0)\n            gen.setup_roc(roc=roc_version)\n            gen.set_global(\"IdleFrame\", align_pattern & 0xFFFFFFF)\n            bx_offset = gen.read_global(\"Bx_offset\")\n            logging.debug(\n                f\"ROC DAQ packet generator active, bx_offset: 0x{bx_offset:02x}, load_val: {load_val}\"\n            )\n    \n>       new_snap_bx = word_align(align_pattern, aligner, load_val, active_erx_align[target])\n\n../common_pytest/fixtures.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../common_pytest/fixtures_utils.py:263: in word_align\n    active_erx=active_erx,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\nsnapshot_bxs = [5, 3, 0, 6, 7, 4, ...], align_pattern = 12273810550690239914\nactive_erx = 63, read_snapshot = True, i2c_setup = False\n\n    def word_align(\n        self,\n        load_val,\n        snapshot_bxs,\n        align_pattern=0xA555555595555555,\n        active_erx=0xFFF,\n        read_snapshot=True,\n        i2c_setup=True,\n    ):\n        \"\"\"\n        Automatic word alignment\n    \n        :param load_val: Value that the internal ECON BX counter resets to when it receives a BCR\n        :type load_val: int\n        :param snapshot_bxs: BX counters (internal to ECON) at which to take the snapshot\n        :type snapshot_bxs: tuple(int)\n        \"\"\"\n    \n        self.logger.info(\"Starting automatic word alignment \\n\")\n    \n        self.fc.basic_setup()\n    \n        if i2c_setup:\n            # configure Automatic Alignment mode\n            self.i2c.write(\n                config={\n                    \"Aligner\": {\n                        \"Global\": {\n                            \"match_pattern_val\": align_pattern,\n                            \"match_mask_val\": 0,\n                            \"i2c_snapshot_en\": 0,\n                            \"snapshot_en\": 1,\n                            \"snapshot_arm\": 0,\n                            \"orbsyn_cnt_max_val\": 3563,\n                            \"orbsyn_cnt_load_val\": load_val,\n                        }\n                    },\n                    \"ChAligner\": {\n                        i: {\n                            \"per_ch_align_en\": 1,\n                            \"sel_override_en\": 0,\n                            \"patt_en\": 0,\n                            \"prbs28_en\": 0,\n                            \"prbs_chk_en\": 0,\n                        }\n                        for i in range(12)\n                    },\n                },\n                log=False,\n                readback=False,\n            )\n            if \"ECOND\" in self.i2c.name:\n                self.i2c.write(\n                    config={\n                        \"RocDaqCtrl\": {\n                            \"Global\": {\n                                \"active_erxs\": active_erx,\n                            }\n                        },\n                    },\n                    log=False,\n                    readback=False,\n                )\n    \n        align_status = False\n        for bx in snapshot_bxs:\n            self.logger.info(f\"Set snapshot bx: {bx}\")\n            # configure snapshot BX\n            self.i2c.write(\n                config={\"Aligner\": {\"Global\": {\"orbsyn_cnt_snapshot\": bx}}},\n                log=True,\n                readback=False,\n            )\n    \n            # send FC\n            if \"ECOND\" in self.target:\n                self.fc.send(\"link_reset_rocd\")\n            else:\n                self.fc.send(\"link_reset_roct\")\n    \n            # check alignment\n            align_status = self.is_word_align(align_pattern, read_snapshot, active_erx)\n            if align_status:\n                self.logger.info(f\"Successful word alignment, snapshot bx: {bx}\")\n                return bx\n    \n        if not align_status:\n            self.logger.error(\n                f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\n            raise RuntimeError(\n>               f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\nE           RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]\n\n../utils/align.py:209: RuntimeError"
      },
      "teardown": {
        "duration": 0.0008962199935922399,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_alignment_etx",
      "lineno": 330,
      "outcome": "error",
      "keywords": [
        "test_alignment_etx",
        "pytestmark",
        "order",
        "test_io.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.2904299229994649,
        "outcome": "failed",
        "crash": {
          "path": "../utils/align.py",
          "lineno": 209,
          "message": "RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]"
        },
        "traceback": [
          {
            "path": "../common_pytest/fixtures.py",
            "lineno": 488,
            "message": ""
          },
          {
            "path": "../common_pytest/fixtures_utils.py",
            "lineno": 263,
            "message": "in word_align"
          },
          {
            "path": "../utils/align.py",
            "lineno": 209,
            "message": "RuntimeError"
          }
        ],
        "longrepr": "initial_setup = None\nI2C_basic_settings_pre_alignment = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0... @`\\x80\\xa0\\xc0\\xe0\\x80\\x00\\x00\\x00\\x00 \\x92\\xaa\\xaa*\\xf3?\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\ni2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\ntv = <utils.testvector.TestVector object at 0x7f91b0d9b0>\ngen = <utils.packetgenerator.PacketGenerator object at 0x7f9178dd30>\nroc_version = 'v3', align_pattern = 12273810550690239914\naligner = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\ntarget = 'ECOND'\n\n    @pytest.fixture(scope=\"session\")\n    def initial_word_align(\n        initial_setup,\n        I2C_basic_settings_pre_alignment,\n        i2c_asic,\n        tv,\n        gen,\n        roc_version,\n        align_pattern,\n        aligner,\n        load_val,\n        target,\n    ):\n        \"\"\"\n        Align the ASIC\n        \"\"\"\n        i2c_asic.write_all(I2C_basic_settings_pre_alignment)\n        i2c_asic.target.configure(runbit_set_config)\n    \n        if gen:\n            gen.set_global(\"bypass\", 1)\n        tv.configure_prbs(\"PRBS15_32b\", header_mask=0)\n        i2c_asic.train_channel()\n    \n        tv.write(\"n_idle_words\", 256)\n        tv.write(\"idle_word\", align_pattern >> 32)\n        tv.write(\"idle_word_BX0\", align_pattern & 0xFFFFFFFF)\n    \n        if \"ECOND\" in target:\n            gen.set_global(\"bypass\", 0)\n            gen.setup_roc(roc=roc_version)\n            gen.set_global(\"IdleFrame\", align_pattern & 0xFFFFFFF)\n            bx_offset = gen.read_global(\"Bx_offset\")\n            logging.debug(\n                f\"ROC DAQ packet generator active, bx_offset: 0x{bx_offset:02x}, load_val: {load_val}\"\n            )\n    \n>       new_snap_bx = word_align(align_pattern, aligner, load_val, active_erx_align[target])\n\n../common_pytest/fixtures.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../common_pytest/fixtures_utils.py:263: in word_align\n    active_erx=active_erx,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\nsnapshot_bxs = [5, 3, 0, 6, 7, 4, ...], align_pattern = 12273810550690239914\nactive_erx = 63, read_snapshot = True, i2c_setup = False\n\n    def word_align(\n        self,\n        load_val,\n        snapshot_bxs,\n        align_pattern=0xA555555595555555,\n        active_erx=0xFFF,\n        read_snapshot=True,\n        i2c_setup=True,\n    ):\n        \"\"\"\n        Automatic word alignment\n    \n        :param load_val: Value that the internal ECON BX counter resets to when it receives a BCR\n        :type load_val: int\n        :param snapshot_bxs: BX counters (internal to ECON) at which to take the snapshot\n        :type snapshot_bxs: tuple(int)\n        \"\"\"\n    \n        self.logger.info(\"Starting automatic word alignment \\n\")\n    \n        self.fc.basic_setup()\n    \n        if i2c_setup:\n            # configure Automatic Alignment mode\n            self.i2c.write(\n                config={\n                    \"Aligner\": {\n                        \"Global\": {\n                            \"match_pattern_val\": align_pattern,\n                            \"match_mask_val\": 0,\n                            \"i2c_snapshot_en\": 0,\n                            \"snapshot_en\": 1,\n                            \"snapshot_arm\": 0,\n                            \"orbsyn_cnt_max_val\": 3563,\n                            \"orbsyn_cnt_load_val\": load_val,\n                        }\n                    },\n                    \"ChAligner\": {\n                        i: {\n                            \"per_ch_align_en\": 1,\n                            \"sel_override_en\": 0,\n                            \"patt_en\": 0,\n                            \"prbs28_en\": 0,\n                            \"prbs_chk_en\": 0,\n                        }\n                        for i in range(12)\n                    },\n                },\n                log=False,\n                readback=False,\n            )\n            if \"ECOND\" in self.i2c.name:\n                self.i2c.write(\n                    config={\n                        \"RocDaqCtrl\": {\n                            \"Global\": {\n                                \"active_erxs\": active_erx,\n                            }\n                        },\n                    },\n                    log=False,\n                    readback=False,\n                )\n    \n        align_status = False\n        for bx in snapshot_bxs:\n            self.logger.info(f\"Set snapshot bx: {bx}\")\n            # configure snapshot BX\n            self.i2c.write(\n                config={\"Aligner\": {\"Global\": {\"orbsyn_cnt_snapshot\": bx}}},\n                log=True,\n                readback=False,\n            )\n    \n            # send FC\n            if \"ECOND\" in self.target:\n                self.fc.send(\"link_reset_rocd\")\n            else:\n                self.fc.send(\"link_reset_roct\")\n    \n            # check alignment\n            align_status = self.is_word_align(align_pattern, read_snapshot, active_erx)\n            if align_status:\n                self.logger.info(f\"Successful word alignment, snapshot bx: {bx}\")\n                return bx\n    \n        if not align_status:\n            self.logger.error(\n                f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\n            raise RuntimeError(\n>               f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\nE           RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]\n\n../utils/align.py:209: RuntimeError"
      },
      "teardown": {
        "duration": 0.0009088500082725659,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_bist_threshold.py::test_bist",
      "lineno": 3,
      "outcome": "passed",
      "keywords": [
        "test_bist",
        "pytestmark",
        "skip_target",
        "order",
        "test_bist_threshold.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.3225895479990868,
        "outcome": "passed"
      },
      "metadata": {
        "voltages": [
          1.2,
          1.04,
          0.88,
          0.96,
          0.92,
          0.9,
          0.91
        ],
        "bist_results": [
          [
            4095,
            4095,
            4095,
            4095,
            4095,
            4095,
            4095,
            4095
          ],
          [
            4095,
            4095,
            4095,
            4095,
            4095,
            4095,
            4095,
            4095
          ],
          [
            4095,
            4095,
            4095,
            4095,
            3327,
            4095,
            4095,
            4095
          ],
          [
            4095,
            4095,
            4095,
            4095,
            4095,
            4095,
            4095,
            4095
          ],
          [
            4095,
            4095,
            4095,
            4095,
            4095,
            4095,
            4095,
            4095
          ],
          [
            4095,
            4095,
            4095,
            4095,
            3583,
            4095,
            4095,
            4095
          ],
          [
            4095,
            4095,
            4095,
            4095,
            3583,
            4095,
            4095,
            4095
          ]
        ],
        "first_failure": 0.91
      },
      "call": {
        "duration": 4.474148348002927,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0015155100118136033,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_common_mode.py::test_common_mode_erx_route",
      "lineno": 169,
      "outcome": "error",
      "keywords": [
        "test_common_mode_erx_route",
        "pytestmark",
        "skip_target",
        "order",
        "test_common_mode.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.009304234001319855,
        "outcome": "failed",
        "crash": {
          "path": "../utils/align.py",
          "lineno": 209,
          "message": "RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]"
        },
        "traceback": [
          {
            "path": "../common_pytest/fixtures.py",
            "lineno": 488,
            "message": ""
          },
          {
            "path": "../common_pytest/fixtures_utils.py",
            "lineno": 263,
            "message": "in word_align"
          },
          {
            "path": "../utils/align.py",
            "lineno": 209,
            "message": "RuntimeError"
          }
        ],
        "longrepr": "initial_setup = None\nI2C_basic_settings_pre_alignment = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0... @`\\x80\\xa0\\xc0\\xe0\\x80\\x00\\x00\\x00\\x00 \\x92\\xaa\\xaa*\\xf3?\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\ni2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\ntv = <utils.testvector.TestVector object at 0x7f91b0d9b0>\ngen = <utils.packetgenerator.PacketGenerator object at 0x7f9178dd30>\nroc_version = 'v3', align_pattern = 12273810550690239914\naligner = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\ntarget = 'ECOND'\n\n    @pytest.fixture(scope=\"session\")\n    def initial_word_align(\n        initial_setup,\n        I2C_basic_settings_pre_alignment,\n        i2c_asic,\n        tv,\n        gen,\n        roc_version,\n        align_pattern,\n        aligner,\n        load_val,\n        target,\n    ):\n        \"\"\"\n        Align the ASIC\n        \"\"\"\n        i2c_asic.write_all(I2C_basic_settings_pre_alignment)\n        i2c_asic.target.configure(runbit_set_config)\n    \n        if gen:\n            gen.set_global(\"bypass\", 1)\n        tv.configure_prbs(\"PRBS15_32b\", header_mask=0)\n        i2c_asic.train_channel()\n    \n        tv.write(\"n_idle_words\", 256)\n        tv.write(\"idle_word\", align_pattern >> 32)\n        tv.write(\"idle_word_BX0\", align_pattern & 0xFFFFFFFF)\n    \n        if \"ECOND\" in target:\n            gen.set_global(\"bypass\", 0)\n            gen.setup_roc(roc=roc_version)\n            gen.set_global(\"IdleFrame\", align_pattern & 0xFFFFFFF)\n            bx_offset = gen.read_global(\"Bx_offset\")\n            logging.debug(\n                f\"ROC DAQ packet generator active, bx_offset: 0x{bx_offset:02x}, load_val: {load_val}\"\n            )\n    \n>       new_snap_bx = word_align(align_pattern, aligner, load_val, active_erx_align[target])\n\n../common_pytest/fixtures.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../common_pytest/fixtures_utils.py:263: in word_align\n    active_erx=active_erx,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\nsnapshot_bxs = [5, 3, 0, 6, 7, 4, ...], align_pattern = 12273810550690239914\nactive_erx = 63, read_snapshot = True, i2c_setup = False\n\n    def word_align(\n        self,\n        load_val,\n        snapshot_bxs,\n        align_pattern=0xA555555595555555,\n        active_erx=0xFFF,\n        read_snapshot=True,\n        i2c_setup=True,\n    ):\n        \"\"\"\n        Automatic word alignment\n    \n        :param load_val: Value that the internal ECON BX counter resets to when it receives a BCR\n        :type load_val: int\n        :param snapshot_bxs: BX counters (internal to ECON) at which to take the snapshot\n        :type snapshot_bxs: tuple(int)\n        \"\"\"\n    \n        self.logger.info(\"Starting automatic word alignment \\n\")\n    \n        self.fc.basic_setup()\n    \n        if i2c_setup:\n            # configure Automatic Alignment mode\n            self.i2c.write(\n                config={\n                    \"Aligner\": {\n                        \"Global\": {\n                            \"match_pattern_val\": align_pattern,\n                            \"match_mask_val\": 0,\n                            \"i2c_snapshot_en\": 0,\n                            \"snapshot_en\": 1,\n                            \"snapshot_arm\": 0,\n                            \"orbsyn_cnt_max_val\": 3563,\n                            \"orbsyn_cnt_load_val\": load_val,\n                        }\n                    },\n                    \"ChAligner\": {\n                        i: {\n                            \"per_ch_align_en\": 1,\n                            \"sel_override_en\": 0,\n                            \"patt_en\": 0,\n                            \"prbs28_en\": 0,\n                            \"prbs_chk_en\": 0,\n                        }\n                        for i in range(12)\n                    },\n                },\n                log=False,\n                readback=False,\n            )\n            if \"ECOND\" in self.i2c.name:\n                self.i2c.write(\n                    config={\n                        \"RocDaqCtrl\": {\n                            \"Global\": {\n                                \"active_erxs\": active_erx,\n                            }\n                        },\n                    },\n                    log=False,\n                    readback=False,\n                )\n    \n        align_status = False\n        for bx in snapshot_bxs:\n            self.logger.info(f\"Set snapshot bx: {bx}\")\n            # configure snapshot BX\n            self.i2c.write(\n                config={\"Aligner\": {\"Global\": {\"orbsyn_cnt_snapshot\": bx}}},\n                log=True,\n                readback=False,\n            )\n    \n            # send FC\n            if \"ECOND\" in self.target:\n                self.fc.send(\"link_reset_rocd\")\n            else:\n                self.fc.send(\"link_reset_roct\")\n    \n            # check alignment\n            align_status = self.is_word_align(align_pattern, read_snapshot, active_erx)\n            if align_status:\n                self.logger.info(f\"Successful word alignment, snapshot bx: {bx}\")\n                return bx\n    \n        if not align_status:\n            self.logger.error(\n                f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\n            raise RuntimeError(\n>               f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\nE           RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]\n\n../utils/align.py:209: RuntimeError"
      },
      "teardown": {
        "duration": 0.0009123300114879385,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_errin.py::test_errBit[129-128]",
      "lineno": 48,
      "outcome": "error",
      "keywords": [
        "test_errBit[129-128]",
        "pytestmark",
        "129-128",
        "parametrize",
        "skip_target",
        "order",
        "test_errin.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.0140828169969609,
        "outcome": "failed",
        "crash": {
          "path": "../utils/align.py",
          "lineno": 209,
          "message": "RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]"
        },
        "traceback": [
          {
            "path": "../common_pytest/fixtures.py",
            "lineno": 488,
            "message": ""
          },
          {
            "path": "../common_pytest/fixtures_utils.py",
            "lineno": 263,
            "message": "in word_align"
          },
          {
            "path": "../utils/align.py",
            "lineno": 209,
            "message": "RuntimeError"
          }
        ],
        "longrepr": "initial_setup = None\nI2C_basic_settings_pre_alignment = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0... @`\\x80\\xa0\\xc0\\xe0\\x80\\x00\\x00\\x00\\x00 \\x92\\xaa\\xaa*\\xf3?\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\ni2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\ntv = <utils.testvector.TestVector object at 0x7f91b0d9b0>\ngen = <utils.packetgenerator.PacketGenerator object at 0x7f9178dd30>\nroc_version = 'v3', align_pattern = 12273810550690239914\naligner = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\ntarget = 'ECOND'\n\n    @pytest.fixture(scope=\"session\")\n    def initial_word_align(\n        initial_setup,\n        I2C_basic_settings_pre_alignment,\n        i2c_asic,\n        tv,\n        gen,\n        roc_version,\n        align_pattern,\n        aligner,\n        load_val,\n        target,\n    ):\n        \"\"\"\n        Align the ASIC\n        \"\"\"\n        i2c_asic.write_all(I2C_basic_settings_pre_alignment)\n        i2c_asic.target.configure(runbit_set_config)\n    \n        if gen:\n            gen.set_global(\"bypass\", 1)\n        tv.configure_prbs(\"PRBS15_32b\", header_mask=0)\n        i2c_asic.train_channel()\n    \n        tv.write(\"n_idle_words\", 256)\n        tv.write(\"idle_word\", align_pattern >> 32)\n        tv.write(\"idle_word_BX0\", align_pattern & 0xFFFFFFFF)\n    \n        if \"ECOND\" in target:\n            gen.set_global(\"bypass\", 0)\n            gen.setup_roc(roc=roc_version)\n            gen.set_global(\"IdleFrame\", align_pattern & 0xFFFFFFF)\n            bx_offset = gen.read_global(\"Bx_offset\")\n            logging.debug(\n                f\"ROC DAQ packet generator active, bx_offset: 0x{bx_offset:02x}, load_val: {load_val}\"\n            )\n    \n>       new_snap_bx = word_align(align_pattern, aligner, load_val, active_erx_align[target])\n\n../common_pytest/fixtures.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../common_pytest/fixtures_utils.py:263: in word_align\n    active_erx=active_erx,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\nsnapshot_bxs = [5, 3, 0, 6, 7, 4, ...], align_pattern = 12273810550690239914\nactive_erx = 63, read_snapshot = True, i2c_setup = False\n\n    def word_align(\n        self,\n        load_val,\n        snapshot_bxs,\n        align_pattern=0xA555555595555555,\n        active_erx=0xFFF,\n        read_snapshot=True,\n        i2c_setup=True,\n    ):\n        \"\"\"\n        Automatic word alignment\n    \n        :param load_val: Value that the internal ECON BX counter resets to when it receives a BCR\n        :type load_val: int\n        :param snapshot_bxs: BX counters (internal to ECON) at which to take the snapshot\n        :type snapshot_bxs: tuple(int)\n        \"\"\"\n    \n        self.logger.info(\"Starting automatic word alignment \\n\")\n    \n        self.fc.basic_setup()\n    \n        if i2c_setup:\n            # configure Automatic Alignment mode\n            self.i2c.write(\n                config={\n                    \"Aligner\": {\n                        \"Global\": {\n                            \"match_pattern_val\": align_pattern,\n                            \"match_mask_val\": 0,\n                            \"i2c_snapshot_en\": 0,\n                            \"snapshot_en\": 1,\n                            \"snapshot_arm\": 0,\n                            \"orbsyn_cnt_max_val\": 3563,\n                            \"orbsyn_cnt_load_val\": load_val,\n                        }\n                    },\n                    \"ChAligner\": {\n                        i: {\n                            \"per_ch_align_en\": 1,\n                            \"sel_override_en\": 0,\n                            \"patt_en\": 0,\n                            \"prbs28_en\": 0,\n                            \"prbs_chk_en\": 0,\n                        }\n                        for i in range(12)\n                    },\n                },\n                log=False,\n                readback=False,\n            )\n            if \"ECOND\" in self.i2c.name:\n                self.i2c.write(\n                    config={\n                        \"RocDaqCtrl\": {\n                            \"Global\": {\n                                \"active_erxs\": active_erx,\n                            }\n                        },\n                    },\n                    log=False,\n                    readback=False,\n                )\n    \n        align_status = False\n        for bx in snapshot_bxs:\n            self.logger.info(f\"Set snapshot bx: {bx}\")\n            # configure snapshot BX\n            self.i2c.write(\n                config={\"Aligner\": {\"Global\": {\"orbsyn_cnt_snapshot\": bx}}},\n                log=True,\n                readback=False,\n            )\n    \n            # send FC\n            if \"ECOND\" in self.target:\n                self.fc.send(\"link_reset_rocd\")\n            else:\n                self.fc.send(\"link_reset_roct\")\n    \n            # check alignment\n            align_status = self.is_word_align(align_pattern, read_snapshot, active_erx)\n            if align_status:\n                self.logger.info(f\"Successful word alignment, snapshot bx: {bx}\")\n                return bx\n    \n        if not align_status:\n            self.logger.error(\n                f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\n            raise RuntimeError(\n>               f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\nE           RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]\n\n../utils/align.py:209: RuntimeError"
      },
      "teardown": {
        "duration": 0.0008903099951567128,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_errin.py::test_errBit[129-16]",
      "lineno": 48,
      "outcome": "error",
      "keywords": [
        "test_errBit[129-16]",
        "pytestmark",
        "129-16",
        "parametrize",
        "skip_target",
        "order",
        "test_errin.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.00958611500391271,
        "outcome": "failed",
        "crash": {
          "path": "../utils/align.py",
          "lineno": 209,
          "message": "RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]"
        },
        "traceback": [
          {
            "path": "../common_pytest/fixtures.py",
            "lineno": 488,
            "message": ""
          },
          {
            "path": "../common_pytest/fixtures_utils.py",
            "lineno": 263,
            "message": "in word_align"
          },
          {
            "path": "../utils/align.py",
            "lineno": 209,
            "message": "RuntimeError"
          }
        ],
        "longrepr": "initial_setup = None\nI2C_basic_settings_pre_alignment = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0... @`\\x80\\xa0\\xc0\\xe0\\x80\\x00\\x00\\x00\\x00 \\x92\\xaa\\xaa*\\xf3?\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\ni2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\ntv = <utils.testvector.TestVector object at 0x7f91b0d9b0>\ngen = <utils.packetgenerator.PacketGenerator object at 0x7f9178dd30>\nroc_version = 'v3', align_pattern = 12273810550690239914\naligner = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\ntarget = 'ECOND'\n\n    @pytest.fixture(scope=\"session\")\n    def initial_word_align(\n        initial_setup,\n        I2C_basic_settings_pre_alignment,\n        i2c_asic,\n        tv,\n        gen,\n        roc_version,\n        align_pattern,\n        aligner,\n        load_val,\n        target,\n    ):\n        \"\"\"\n        Align the ASIC\n        \"\"\"\n        i2c_asic.write_all(I2C_basic_settings_pre_alignment)\n        i2c_asic.target.configure(runbit_set_config)\n    \n        if gen:\n            gen.set_global(\"bypass\", 1)\n        tv.configure_prbs(\"PRBS15_32b\", header_mask=0)\n        i2c_asic.train_channel()\n    \n        tv.write(\"n_idle_words\", 256)\n        tv.write(\"idle_word\", align_pattern >> 32)\n        tv.write(\"idle_word_BX0\", align_pattern & 0xFFFFFFFF)\n    \n        if \"ECOND\" in target:\n            gen.set_global(\"bypass\", 0)\n            gen.setup_roc(roc=roc_version)\n            gen.set_global(\"IdleFrame\", align_pattern & 0xFFFFFFF)\n            bx_offset = gen.read_global(\"Bx_offset\")\n            logging.debug(\n                f\"ROC DAQ packet generator active, bx_offset: 0x{bx_offset:02x}, load_val: {load_val}\"\n            )\n    \n>       new_snap_bx = word_align(align_pattern, aligner, load_val, active_erx_align[target])\n\n../common_pytest/fixtures.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../common_pytest/fixtures_utils.py:263: in word_align\n    active_erx=active_erx,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\nsnapshot_bxs = [5, 3, 0, 6, 7, 4, ...], align_pattern = 12273810550690239914\nactive_erx = 63, read_snapshot = True, i2c_setup = False\n\n    def word_align(\n        self,\n        load_val,\n        snapshot_bxs,\n        align_pattern=0xA555555595555555,\n        active_erx=0xFFF,\n        read_snapshot=True,\n        i2c_setup=True,\n    ):\n        \"\"\"\n        Automatic word alignment\n    \n        :param load_val: Value that the internal ECON BX counter resets to when it receives a BCR\n        :type load_val: int\n        :param snapshot_bxs: BX counters (internal to ECON) at which to take the snapshot\n        :type snapshot_bxs: tuple(int)\n        \"\"\"\n    \n        self.logger.info(\"Starting automatic word alignment \\n\")\n    \n        self.fc.basic_setup()\n    \n        if i2c_setup:\n            # configure Automatic Alignment mode\n            self.i2c.write(\n                config={\n                    \"Aligner\": {\n                        \"Global\": {\n                            \"match_pattern_val\": align_pattern,\n                            \"match_mask_val\": 0,\n                            \"i2c_snapshot_en\": 0,\n                            \"snapshot_en\": 1,\n                            \"snapshot_arm\": 0,\n                            \"orbsyn_cnt_max_val\": 3563,\n                            \"orbsyn_cnt_load_val\": load_val,\n                        }\n                    },\n                    \"ChAligner\": {\n                        i: {\n                            \"per_ch_align_en\": 1,\n                            \"sel_override_en\": 0,\n                            \"patt_en\": 0,\n                            \"prbs28_en\": 0,\n                            \"prbs_chk_en\": 0,\n                        }\n                        for i in range(12)\n                    },\n                },\n                log=False,\n                readback=False,\n            )\n            if \"ECOND\" in self.i2c.name:\n                self.i2c.write(\n                    config={\n                        \"RocDaqCtrl\": {\n                            \"Global\": {\n                                \"active_erxs\": active_erx,\n                            }\n                        },\n                    },\n                    log=False,\n                    readback=False,\n                )\n    \n        align_status = False\n        for bx in snapshot_bxs:\n            self.logger.info(f\"Set snapshot bx: {bx}\")\n            # configure snapshot BX\n            self.i2c.write(\n                config={\"Aligner\": {\"Global\": {\"orbsyn_cnt_snapshot\": bx}}},\n                log=True,\n                readback=False,\n            )\n    \n            # send FC\n            if \"ECOND\" in self.target:\n                self.fc.send(\"link_reset_rocd\")\n            else:\n                self.fc.send(\"link_reset_roct\")\n    \n            # check alignment\n            align_status = self.is_word_align(align_pattern, read_snapshot, active_erx)\n            if align_status:\n                self.logger.info(f\"Successful word alignment, snapshot bx: {bx}\")\n                return bx\n    \n        if not align_status:\n            self.logger.error(\n                f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\n            raise RuntimeError(\n>               f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\nE           RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]\n\n../utils/align.py:209: RuntimeError"
      },
      "teardown": {
        "duration": 0.0009249900031136349,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_input_aligner.py::test_input_aligner_shift[shift0]",
      "lineno": 112,
      "outcome": "error",
      "keywords": [
        "test_input_aligner_shift[shift0]",
        "pytestmark",
        "shift0",
        "parametrize",
        "order",
        "test_input_aligner.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.008977474004495889,
        "outcome": "failed",
        "crash": {
          "path": "../utils/align.py",
          "lineno": 209,
          "message": "RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]"
        },
        "traceback": [
          {
            "path": "../common_pytest/fixtures.py",
            "lineno": 488,
            "message": ""
          },
          {
            "path": "../common_pytest/fixtures_utils.py",
            "lineno": 263,
            "message": "in word_align"
          },
          {
            "path": "../utils/align.py",
            "lineno": 209,
            "message": "RuntimeError"
          }
        ],
        "longrepr": "initial_setup = None\nI2C_basic_settings_pre_alignment = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0... @`\\x80\\xa0\\xc0\\xe0\\x80\\x00\\x00\\x00\\x00 \\x92\\xaa\\xaa*\\xf3?\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\ni2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\ntv = <utils.testvector.TestVector object at 0x7f91b0d9b0>\ngen = <utils.packetgenerator.PacketGenerator object at 0x7f9178dd30>\nroc_version = 'v3', align_pattern = 12273810550690239914\naligner = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\ntarget = 'ECOND'\n\n    @pytest.fixture(scope=\"session\")\n    def initial_word_align(\n        initial_setup,\n        I2C_basic_settings_pre_alignment,\n        i2c_asic,\n        tv,\n        gen,\n        roc_version,\n        align_pattern,\n        aligner,\n        load_val,\n        target,\n    ):\n        \"\"\"\n        Align the ASIC\n        \"\"\"\n        i2c_asic.write_all(I2C_basic_settings_pre_alignment)\n        i2c_asic.target.configure(runbit_set_config)\n    \n        if gen:\n            gen.set_global(\"bypass\", 1)\n        tv.configure_prbs(\"PRBS15_32b\", header_mask=0)\n        i2c_asic.train_channel()\n    \n        tv.write(\"n_idle_words\", 256)\n        tv.write(\"idle_word\", align_pattern >> 32)\n        tv.write(\"idle_word_BX0\", align_pattern & 0xFFFFFFFF)\n    \n        if \"ECOND\" in target:\n            gen.set_global(\"bypass\", 0)\n            gen.setup_roc(roc=roc_version)\n            gen.set_global(\"IdleFrame\", align_pattern & 0xFFFFFFF)\n            bx_offset = gen.read_global(\"Bx_offset\")\n            logging.debug(\n                f\"ROC DAQ packet generator active, bx_offset: 0x{bx_offset:02x}, load_val: {load_val}\"\n            )\n    \n>       new_snap_bx = word_align(align_pattern, aligner, load_val, active_erx_align[target])\n\n../common_pytest/fixtures.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../common_pytest/fixtures_utils.py:263: in word_align\n    active_erx=active_erx,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\nsnapshot_bxs = [5, 3, 0, 6, 7, 4, ...], align_pattern = 12273810550690239914\nactive_erx = 63, read_snapshot = True, i2c_setup = False\n\n    def word_align(\n        self,\n        load_val,\n        snapshot_bxs,\n        align_pattern=0xA555555595555555,\n        active_erx=0xFFF,\n        read_snapshot=True,\n        i2c_setup=True,\n    ):\n        \"\"\"\n        Automatic word alignment\n    \n        :param load_val: Value that the internal ECON BX counter resets to when it receives a BCR\n        :type load_val: int\n        :param snapshot_bxs: BX counters (internal to ECON) at which to take the snapshot\n        :type snapshot_bxs: tuple(int)\n        \"\"\"\n    \n        self.logger.info(\"Starting automatic word alignment \\n\")\n    \n        self.fc.basic_setup()\n    \n        if i2c_setup:\n            # configure Automatic Alignment mode\n            self.i2c.write(\n                config={\n                    \"Aligner\": {\n                        \"Global\": {\n                            \"match_pattern_val\": align_pattern,\n                            \"match_mask_val\": 0,\n                            \"i2c_snapshot_en\": 0,\n                            \"snapshot_en\": 1,\n                            \"snapshot_arm\": 0,\n                            \"orbsyn_cnt_max_val\": 3563,\n                            \"orbsyn_cnt_load_val\": load_val,\n                        }\n                    },\n                    \"ChAligner\": {\n                        i: {\n                            \"per_ch_align_en\": 1,\n                            \"sel_override_en\": 0,\n                            \"patt_en\": 0,\n                            \"prbs28_en\": 0,\n                            \"prbs_chk_en\": 0,\n                        }\n                        for i in range(12)\n                    },\n                },\n                log=False,\n                readback=False,\n            )\n            if \"ECOND\" in self.i2c.name:\n                self.i2c.write(\n                    config={\n                        \"RocDaqCtrl\": {\n                            \"Global\": {\n                                \"active_erxs\": active_erx,\n                            }\n                        },\n                    },\n                    log=False,\n                    readback=False,\n                )\n    \n        align_status = False\n        for bx in snapshot_bxs:\n            self.logger.info(f\"Set snapshot bx: {bx}\")\n            # configure snapshot BX\n            self.i2c.write(\n                config={\"Aligner\": {\"Global\": {\"orbsyn_cnt_snapshot\": bx}}},\n                log=True,\n                readback=False,\n            )\n    \n            # send FC\n            if \"ECOND\" in self.target:\n                self.fc.send(\"link_reset_rocd\")\n            else:\n                self.fc.send(\"link_reset_roct\")\n    \n            # check alignment\n            align_status = self.is_word_align(align_pattern, read_snapshot, active_erx)\n            if align_status:\n                self.logger.info(f\"Successful word alignment, snapshot bx: {bx}\")\n                return bx\n    \n        if not align_status:\n            self.logger.error(\n                f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\n            raise RuntimeError(\n>               f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\nE           RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]\n\n../utils/align.py:209: RuntimeError"
      },
      "teardown": {
        "duration": 0.0009102909971261397,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_mux_fix_calib.py::test_mux",
      "lineno": 36,
      "outcome": "skipped",
      "keywords": [
        "test_mux",
        "pytestmark",
        "order",
        "skip_target",
        "skip",
        "test_mux_fix_calib.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.0008907300070859492,
        "outcome": "skipped",
        "longrepr": "('/home/HGCAL_dev/mstamenk/econd-sw/test_bench/test_mux_fix_calib.py', 37, 'Skipped: unconditional skip')"
      },
      "teardown": {
        "duration": 0.0007450800039805472,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_mux_fix_calib.py::test_float_to_fix",
      "lineno": 157,
      "outcome": "skipped",
      "keywords": [
        "test_float_to_fix",
        "pytestmark",
        "order",
        "skip_target",
        "skip",
        "test_mux_fix_calib.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.000838740001199767,
        "outcome": "skipped",
        "longrepr": "('/home/HGCAL_dev/mstamenk/econd-sw/test_bench/test_mux_fix_calib.py', 158, 'Skipped: unconditional skip')"
      },
      "teardown": {
        "duration": 0.0007602599944220856,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_mux_fix_calib.py::test_calibrations",
      "lineno": 286,
      "outcome": "skipped",
      "keywords": [
        "test_calibrations",
        "pytestmark",
        "order",
        "skip_target",
        "skip",
        "test_mux_fix_calib.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.0008124309970298782,
        "outcome": "skipped",
        "longrepr": "('/home/HGCAL_dev/mstamenk/econd-sw/test_bench/test_mux_fix_calib.py', 287, 'Skipped: unconditional skip')"
      },
      "teardown": {
        "duration": 0.0007427100063068792,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_serializer.py::test_serializer",
      "lineno": 94,
      "outcome": "error",
      "keywords": [
        "test_serializer",
        "pytestmark",
        "skip_target",
        "order",
        "test_serializer.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.010904194990871474,
        "outcome": "failed",
        "crash": {
          "path": "../utils/align.py",
          "lineno": 209,
          "message": "RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]"
        },
        "traceback": [
          {
            "path": "../common_pytest/fixtures.py",
            "lineno": 488,
            "message": ""
          },
          {
            "path": "../common_pytest/fixtures_utils.py",
            "lineno": 263,
            "message": "in word_align"
          },
          {
            "path": "../utils/align.py",
            "lineno": 209,
            "message": "RuntimeError"
          }
        ],
        "longrepr": "initial_setup = None\nI2C_basic_settings_pre_alignment = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0... @`\\x80\\xa0\\xc0\\xe0\\x80\\x00\\x00\\x00\\x00 \\x92\\xaa\\xaa*\\xf3?\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\ni2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\ntv = <utils.testvector.TestVector object at 0x7f91b0d9b0>\ngen = <utils.packetgenerator.PacketGenerator object at 0x7f9178dd30>\nroc_version = 'v3', align_pattern = 12273810550690239914\naligner = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\ntarget = 'ECOND'\n\n    @pytest.fixture(scope=\"session\")\n    def initial_word_align(\n        initial_setup,\n        I2C_basic_settings_pre_alignment,\n        i2c_asic,\n        tv,\n        gen,\n        roc_version,\n        align_pattern,\n        aligner,\n        load_val,\n        target,\n    ):\n        \"\"\"\n        Align the ASIC\n        \"\"\"\n        i2c_asic.write_all(I2C_basic_settings_pre_alignment)\n        i2c_asic.target.configure(runbit_set_config)\n    \n        if gen:\n            gen.set_global(\"bypass\", 1)\n        tv.configure_prbs(\"PRBS15_32b\", header_mask=0)\n        i2c_asic.train_channel()\n    \n        tv.write(\"n_idle_words\", 256)\n        tv.write(\"idle_word\", align_pattern >> 32)\n        tv.write(\"idle_word_BX0\", align_pattern & 0xFFFFFFFF)\n    \n        if \"ECOND\" in target:\n            gen.set_global(\"bypass\", 0)\n            gen.setup_roc(roc=roc_version)\n            gen.set_global(\"IdleFrame\", align_pattern & 0xFFFFFFF)\n            bx_offset = gen.read_global(\"Bx_offset\")\n            logging.debug(\n                f\"ROC DAQ packet generator active, bx_offset: 0x{bx_offset:02x}, load_val: {load_val}\"\n            )\n    \n>       new_snap_bx = word_align(align_pattern, aligner, load_val, active_erx_align[target])\n\n../common_pytest/fixtures.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../common_pytest/fixtures_utils.py:263: in word_align\n    active_erx=active_erx,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\nsnapshot_bxs = [5, 3, 0, 6, 7, 4, ...], align_pattern = 12273810550690239914\nactive_erx = 63, read_snapshot = True, i2c_setup = False\n\n    def word_align(\n        self,\n        load_val,\n        snapshot_bxs,\n        align_pattern=0xA555555595555555,\n        active_erx=0xFFF,\n        read_snapshot=True,\n        i2c_setup=True,\n    ):\n        \"\"\"\n        Automatic word alignment\n    \n        :param load_val: Value that the internal ECON BX counter resets to when it receives a BCR\n        :type load_val: int\n        :param snapshot_bxs: BX counters (internal to ECON) at which to take the snapshot\n        :type snapshot_bxs: tuple(int)\n        \"\"\"\n    \n        self.logger.info(\"Starting automatic word alignment \\n\")\n    \n        self.fc.basic_setup()\n    \n        if i2c_setup:\n            # configure Automatic Alignment mode\n            self.i2c.write(\n                config={\n                    \"Aligner\": {\n                        \"Global\": {\n                            \"match_pattern_val\": align_pattern,\n                            \"match_mask_val\": 0,\n                            \"i2c_snapshot_en\": 0,\n                            \"snapshot_en\": 1,\n                            \"snapshot_arm\": 0,\n                            \"orbsyn_cnt_max_val\": 3563,\n                            \"orbsyn_cnt_load_val\": load_val,\n                        }\n                    },\n                    \"ChAligner\": {\n                        i: {\n                            \"per_ch_align_en\": 1,\n                            \"sel_override_en\": 0,\n                            \"patt_en\": 0,\n                            \"prbs28_en\": 0,\n                            \"prbs_chk_en\": 0,\n                        }\n                        for i in range(12)\n                    },\n                },\n                log=False,\n                readback=False,\n            )\n            if \"ECOND\" in self.i2c.name:\n                self.i2c.write(\n                    config={\n                        \"RocDaqCtrl\": {\n                            \"Global\": {\n                                \"active_erxs\": active_erx,\n                            }\n                        },\n                    },\n                    log=False,\n                    readback=False,\n                )\n    \n        align_status = False\n        for bx in snapshot_bxs:\n            self.logger.info(f\"Set snapshot bx: {bx}\")\n            # configure snapshot BX\n            self.i2c.write(\n                config={\"Aligner\": {\"Global\": {\"orbsyn_cnt_snapshot\": bx}}},\n                log=True,\n                readback=False,\n            )\n    \n            # send FC\n            if \"ECOND\" in self.target:\n                self.fc.send(\"link_reset_rocd\")\n            else:\n                self.fc.send(\"link_reset_roct\")\n    \n            # check alignment\n            align_status = self.is_word_align(align_pattern, read_snapshot, active_erx)\n            if align_status:\n                self.logger.info(f\"Successful word alignment, snapshot bx: {bx}\")\n                return bx\n    \n        if not align_status:\n            self.logger.error(\n                f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\n            raise RuntimeError(\n>               f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\nE           RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]\n\n../utils/align.py:209: RuntimeError"
      },
      "teardown": {
        "duration": 0.0009093300031963736,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_algorithm.py::test_algorithm_compression_emu[../econt_testvectors/counterPatternInTC/RPT/]",
      "lineno": 58,
      "outcome": "skipped",
      "keywords": [
        "test_algorithm_compression_emu[../econt_testvectors/counterPatternInTC/RPT/]",
        "pytestmark",
        "../econt_testvectors/counterPatternInTC/RPT/",
        "parametrize",
        "skip_target",
        "order",
        "skip",
        "test_algorithm.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.0008644210029160604,
        "outcome": "skipped",
        "longrepr": "('/home/HGCAL_dev/mstamenk/econd-sw/test_bench/test_algorithm.py', 59, 'Skipped: unconditional skip')"
      },
      "teardown": {
        "duration": 0.0007450209959642962,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_algorithm.py::test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC/RPT/]",
      "lineno": 213,
      "outcome": "skipped",
      "keywords": [
        "test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC/RPT/]",
        "pytestmark",
        "../econt_testvectors/counterPatternInTC/RPT/",
        "parametrize",
        "skip_target",
        "order",
        "skip",
        "test_algorithm.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.0008596499974373728,
        "outcome": "skipped",
        "longrepr": "('/home/HGCAL_dev/mstamenk/econd-sw/test_bench/test_algorithm.py', 214, 'Skipped: unconditional skip')"
      },
      "teardown": {
        "duration": 0.000756031004129909,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_algorithm.py::test_algorithm_compression_bypass[../econt_testvectors/mcDataset/STC_type0_eTx4/]",
      "lineno": 213,
      "outcome": "skipped",
      "keywords": [
        "test_algorithm_compression_bypass[../econt_testvectors/mcDataset/STC_type0_eTx4/]",
        "pytestmark",
        "../econt_testvectors/mcDataset/STC_type0_eTx4/",
        "parametrize",
        "skip_target",
        "order",
        "skip",
        "test_algorithm.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.0008217900031013414,
        "outcome": "skipped",
        "longrepr": "('/home/HGCAL_dev/mstamenk/econd-sw/test_bench/test_algorithm.py', 214, 'Skipped: unconditional skip')"
      },
      "teardown": {
        "duration": 0.0007361110037891194,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_algorithm.py::test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/RPT/]",
      "lineno": 213,
      "outcome": "skipped",
      "keywords": [
        "test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/RPT/]",
        "pytestmark",
        "../econt_testvectors/counterPatternInTC_by2/RPT/",
        "parametrize",
        "skip_target",
        "order",
        "skip",
        "test_algorithm.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.0008207399951061234,
        "outcome": "skipped",
        "longrepr": "('/home/HGCAL_dev/mstamenk/econd-sw/test_bench/test_algorithm.py', 214, 'Skipped: unconditional skip')"
      },
      "teardown": {
        "duration": 0.0007399799942504615,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_algorithm.py::test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/BC_10eTx/0]",
      "lineno": 213,
      "outcome": "skipped",
      "keywords": [
        "test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/BC_10eTx/0]",
        "pytestmark",
        "../econt_testvectors/counterPatternInTC_by2/BC_10eTx/0",
        "parametrize",
        "skip_target",
        "order",
        "skip",
        "test_algorithm.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.0008201099990401417,
        "outcome": "skipped",
        "longrepr": "('/home/HGCAL_dev/mstamenk/econd-sw/test_bench/test_algorithm.py', 214, 'Skipped: unconditional skip')"
      },
      "teardown": {
        "duration": 0.000757860005251132,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_algorithm.py::test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/BC_5eTx/]",
      "lineno": 213,
      "outcome": "skipped",
      "keywords": [
        "test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/BC_5eTx/]",
        "pytestmark",
        "../econt_testvectors/counterPatternInTC_by2/BC_5eTx/",
        "parametrize",
        "skip_target",
        "order",
        "skip",
        "test_algorithm.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.0008187610073946416,
        "outcome": "skipped",
        "longrepr": "('/home/HGCAL_dev/mstamenk/econd-sw/test_bench/test_algorithm.py', 214, 'Skipped: unconditional skip')"
      },
      "teardown": {
        "duration": 0.0007334700057981536,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_algorithm.py::test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/BC_1eTx/0]",
      "lineno": 213,
      "outcome": "skipped",
      "keywords": [
        "test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/BC_1eTx/0]",
        "pytestmark",
        "../econt_testvectors/counterPatternInTC_by2/BC_1eTx/0",
        "parametrize",
        "skip_target",
        "order",
        "skip",
        "test_algorithm.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.0008230809908127412,
        "outcome": "skipped",
        "longrepr": "('/home/HGCAL_dev/mstamenk/econd-sw/test_bench/test_algorithm.py', 214, 'Skipped: unconditional skip')"
      },
      "teardown": {
        "duration": 0.0007399799942504615,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_algorithm.py::test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/BC_1eTx/1]",
      "lineno": 213,
      "outcome": "skipped",
      "keywords": [
        "test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/BC_1eTx/1]",
        "pytestmark",
        "../econt_testvectors/counterPatternInTC_by2/BC_1eTx/1",
        "parametrize",
        "skip_target",
        "order",
        "skip",
        "test_algorithm.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.0008233809930970892,
        "outcome": "skipped",
        "longrepr": "('/home/HGCAL_dev/mstamenk/econd-sw/test_bench/test_algorithm.py', 214, 'Skipped: unconditional skip')"
      },
      "teardown": {
        "duration": 0.0007358699949691072,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_algorithm.py::test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/BC_10eTx/1]",
      "lineno": 213,
      "outcome": "skipped",
      "keywords": [
        "test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/BC_10eTx/1]",
        "pytestmark",
        "../econt_testvectors/counterPatternInTC_by2/BC_10eTx/1",
        "parametrize",
        "skip_target",
        "order",
        "skip",
        "test_algorithm.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.0008355899917660281,
        "outcome": "skipped",
        "longrepr": "('/home/HGCAL_dev/mstamenk/econd-sw/test_bench/test_algorithm.py', 214, 'Skipped: unconditional skip')"
      },
      "teardown": {
        "duration": 0.0007519810023950413,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_algorithm.py::test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/TS_Thr47_13eTx/]",
      "lineno": 213,
      "outcome": "skipped",
      "keywords": [
        "test_algorithm_compression_bypass[../econt_testvectors/counterPatternInTC_by2/TS_Thr47_13eTx/]",
        "pytestmark",
        "../econt_testvectors/counterPatternInTC_by2/TS_Thr47_13eTx/",
        "parametrize",
        "skip_target",
        "order",
        "skip",
        "test_algorithm.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.0018955510022351518,
        "outcome": "skipped",
        "longrepr": "('/home/HGCAL_dev/mstamenk/econd-sw/test_bench/test_algorithm.py', 214, 'Skipped: unconditional skip')"
      },
      "teardown": {
        "duration": 0.0007822500047041103,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_packets.py::test_single_fcsequence[counter_100-None-fc_sequence0-eTx-0]",
      "lineno": 137,
      "outcome": "error",
      "keywords": [
        "test_single_fcsequence[counter_100-None-fc_sequence0-eTx-0]",
        "pytestmark",
        "counter_100-None-fc_sequence0-eTx-0",
        "parametrize",
        "skip_target",
        "order",
        "test_packets.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.021123190002981573,
        "outcome": "failed",
        "crash": {
          "path": "../utils/align.py",
          "lineno": 209,
          "message": "RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]"
        },
        "traceback": [
          {
            "path": "../common_pytest/fixtures.py",
            "lineno": 488,
            "message": ""
          },
          {
            "path": "../common_pytest/fixtures_utils.py",
            "lineno": 263,
            "message": "in word_align"
          },
          {
            "path": "../utils/align.py",
            "lineno": 209,
            "message": "RuntimeError"
          }
        ],
        "longrepr": "initial_setup = None\nI2C_basic_settings_pre_alignment = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0... @`\\x80\\xa0\\xc0\\xe0\\x80\\x00\\x00\\x00\\x00 \\x92\\xaa\\xaa*\\xf3?\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\ni2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\ntv = <utils.testvector.TestVector object at 0x7f91b0d9b0>\ngen = <utils.packetgenerator.PacketGenerator object at 0x7f9178dd30>\nroc_version = 'v3', align_pattern = 12273810550690239914\naligner = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\ntarget = 'ECOND'\n\n    @pytest.fixture(scope=\"session\")\n    def initial_word_align(\n        initial_setup,\n        I2C_basic_settings_pre_alignment,\n        i2c_asic,\n        tv,\n        gen,\n        roc_version,\n        align_pattern,\n        aligner,\n        load_val,\n        target,\n    ):\n        \"\"\"\n        Align the ASIC\n        \"\"\"\n        i2c_asic.write_all(I2C_basic_settings_pre_alignment)\n        i2c_asic.target.configure(runbit_set_config)\n    \n        if gen:\n            gen.set_global(\"bypass\", 1)\n        tv.configure_prbs(\"PRBS15_32b\", header_mask=0)\n        i2c_asic.train_channel()\n    \n        tv.write(\"n_idle_words\", 256)\n        tv.write(\"idle_word\", align_pattern >> 32)\n        tv.write(\"idle_word_BX0\", align_pattern & 0xFFFFFFFF)\n    \n        if \"ECOND\" in target:\n            gen.set_global(\"bypass\", 0)\n            gen.setup_roc(roc=roc_version)\n            gen.set_global(\"IdleFrame\", align_pattern & 0xFFFFFFF)\n            bx_offset = gen.read_global(\"Bx_offset\")\n            logging.debug(\n                f\"ROC DAQ packet generator active, bx_offset: 0x{bx_offset:02x}, load_val: {load_val}\"\n            )\n    \n>       new_snap_bx = word_align(align_pattern, aligner, load_val, active_erx_align[target])\n\n../common_pytest/fixtures.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../common_pytest/fixtures_utils.py:263: in word_align\n    active_erx=active_erx,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\nsnapshot_bxs = [5, 3, 0, 6, 7, 4, ...], align_pattern = 12273810550690239914\nactive_erx = 63, read_snapshot = True, i2c_setup = False\n\n    def word_align(\n        self,\n        load_val,\n        snapshot_bxs,\n        align_pattern=0xA555555595555555,\n        active_erx=0xFFF,\n        read_snapshot=True,\n        i2c_setup=True,\n    ):\n        \"\"\"\n        Automatic word alignment\n    \n        :param load_val: Value that the internal ECON BX counter resets to when it receives a BCR\n        :type load_val: int\n        :param snapshot_bxs: BX counters (internal to ECON) at which to take the snapshot\n        :type snapshot_bxs: tuple(int)\n        \"\"\"\n    \n        self.logger.info(\"Starting automatic word alignment \\n\")\n    \n        self.fc.basic_setup()\n    \n        if i2c_setup:\n            # configure Automatic Alignment mode\n            self.i2c.write(\n                config={\n                    \"Aligner\": {\n                        \"Global\": {\n                            \"match_pattern_val\": align_pattern,\n                            \"match_mask_val\": 0,\n                            \"i2c_snapshot_en\": 0,\n                            \"snapshot_en\": 1,\n                            \"snapshot_arm\": 0,\n                            \"orbsyn_cnt_max_val\": 3563,\n                            \"orbsyn_cnt_load_val\": load_val,\n                        }\n                    },\n                    \"ChAligner\": {\n                        i: {\n                            \"per_ch_align_en\": 1,\n                            \"sel_override_en\": 0,\n                            \"patt_en\": 0,\n                            \"prbs28_en\": 0,\n                            \"prbs_chk_en\": 0,\n                        }\n                        for i in range(12)\n                    },\n                },\n                log=False,\n                readback=False,\n            )\n            if \"ECOND\" in self.i2c.name:\n                self.i2c.write(\n                    config={\n                        \"RocDaqCtrl\": {\n                            \"Global\": {\n                                \"active_erxs\": active_erx,\n                            }\n                        },\n                    },\n                    log=False,\n                    readback=False,\n                )\n    \n        align_status = False\n        for bx in snapshot_bxs:\n            self.logger.info(f\"Set snapshot bx: {bx}\")\n            # configure snapshot BX\n            self.i2c.write(\n                config={\"Aligner\": {\"Global\": {\"orbsyn_cnt_snapshot\": bx}}},\n                log=True,\n                readback=False,\n            )\n    \n            # send FC\n            if \"ECOND\" in self.target:\n                self.fc.send(\"link_reset_rocd\")\n            else:\n                self.fc.send(\"link_reset_roct\")\n    \n            # check alignment\n            align_status = self.is_word_align(align_pattern, read_snapshot, active_erx)\n            if align_status:\n                self.logger.info(f\"Successful word alignment, snapshot bx: {bx}\")\n                return bx\n    \n        if not align_status:\n            self.logger.error(\n                f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\n            raise RuntimeError(\n>               f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\nE           RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]\n\n../utils/align.py:209: RuntimeError"
      },
      "teardown": {
        "duration": 0.0008927400049287826,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_packets.py::test_single_fcsequence[counter_100-None-fc_sequence1-eTx-01]",
      "lineno": 137,
      "outcome": "error",
      "keywords": [
        "test_single_fcsequence[counter_100-None-fc_sequence1-eTx-01]",
        "pytestmark",
        "counter_100-None-fc_sequence1-eTx-01",
        "parametrize",
        "skip_target",
        "order",
        "test_packets.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.009901325000100769,
        "outcome": "failed",
        "crash": {
          "path": "../utils/align.py",
          "lineno": 209,
          "message": "RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]"
        },
        "traceback": [
          {
            "path": "../common_pytest/fixtures.py",
            "lineno": 488,
            "message": ""
          },
          {
            "path": "../common_pytest/fixtures_utils.py",
            "lineno": 263,
            "message": "in word_align"
          },
          {
            "path": "../utils/align.py",
            "lineno": 209,
            "message": "RuntimeError"
          }
        ],
        "longrepr": "initial_setup = None\nI2C_basic_settings_pre_alignment = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0... @`\\x80\\xa0\\xc0\\xe0\\x80\\x00\\x00\\x00\\x00 \\x92\\xaa\\xaa*\\xf3?\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\ni2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\ntv = <utils.testvector.TestVector object at 0x7f91b0d9b0>\ngen = <utils.packetgenerator.PacketGenerator object at 0x7f9178dd30>\nroc_version = 'v3', align_pattern = 12273810550690239914\naligner = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\ntarget = 'ECOND'\n\n    @pytest.fixture(scope=\"session\")\n    def initial_word_align(\n        initial_setup,\n        I2C_basic_settings_pre_alignment,\n        i2c_asic,\n        tv,\n        gen,\n        roc_version,\n        align_pattern,\n        aligner,\n        load_val,\n        target,\n    ):\n        \"\"\"\n        Align the ASIC\n        \"\"\"\n        i2c_asic.write_all(I2C_basic_settings_pre_alignment)\n        i2c_asic.target.configure(runbit_set_config)\n    \n        if gen:\n            gen.set_global(\"bypass\", 1)\n        tv.configure_prbs(\"PRBS15_32b\", header_mask=0)\n        i2c_asic.train_channel()\n    \n        tv.write(\"n_idle_words\", 256)\n        tv.write(\"idle_word\", align_pattern >> 32)\n        tv.write(\"idle_word_BX0\", align_pattern & 0xFFFFFFFF)\n    \n        if \"ECOND\" in target:\n            gen.set_global(\"bypass\", 0)\n            gen.setup_roc(roc=roc_version)\n            gen.set_global(\"IdleFrame\", align_pattern & 0xFFFFFFF)\n            bx_offset = gen.read_global(\"Bx_offset\")\n            logging.debug(\n                f\"ROC DAQ packet generator active, bx_offset: 0x{bx_offset:02x}, load_val: {load_val}\"\n            )\n    \n>       new_snap_bx = word_align(align_pattern, aligner, load_val, active_erx_align[target])\n\n../common_pytest/fixtures.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../common_pytest/fixtures_utils.py:263: in word_align\n    active_erx=active_erx,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\nsnapshot_bxs = [5, 3, 0, 6, 7, 4, ...], align_pattern = 12273810550690239914\nactive_erx = 63, read_snapshot = True, i2c_setup = False\n\n    def word_align(\n        self,\n        load_val,\n        snapshot_bxs,\n        align_pattern=0xA555555595555555,\n        active_erx=0xFFF,\n        read_snapshot=True,\n        i2c_setup=True,\n    ):\n        \"\"\"\n        Automatic word alignment\n    \n        :param load_val: Value that the internal ECON BX counter resets to when it receives a BCR\n        :type load_val: int\n        :param snapshot_bxs: BX counters (internal to ECON) at which to take the snapshot\n        :type snapshot_bxs: tuple(int)\n        \"\"\"\n    \n        self.logger.info(\"Starting automatic word alignment \\n\")\n    \n        self.fc.basic_setup()\n    \n        if i2c_setup:\n            # configure Automatic Alignment mode\n            self.i2c.write(\n                config={\n                    \"Aligner\": {\n                        \"Global\": {\n                            \"match_pattern_val\": align_pattern,\n                            \"match_mask_val\": 0,\n                            \"i2c_snapshot_en\": 0,\n                            \"snapshot_en\": 1,\n                            \"snapshot_arm\": 0,\n                            \"orbsyn_cnt_max_val\": 3563,\n                            \"orbsyn_cnt_load_val\": load_val,\n                        }\n                    },\n                    \"ChAligner\": {\n                        i: {\n                            \"per_ch_align_en\": 1,\n                            \"sel_override_en\": 0,\n                            \"patt_en\": 0,\n                            \"prbs28_en\": 0,\n                            \"prbs_chk_en\": 0,\n                        }\n                        for i in range(12)\n                    },\n                },\n                log=False,\n                readback=False,\n            )\n            if \"ECOND\" in self.i2c.name:\n                self.i2c.write(\n                    config={\n                        \"RocDaqCtrl\": {\n                            \"Global\": {\n                                \"active_erxs\": active_erx,\n                            }\n                        },\n                    },\n                    log=False,\n                    readback=False,\n                )\n    \n        align_status = False\n        for bx in snapshot_bxs:\n            self.logger.info(f\"Set snapshot bx: {bx}\")\n            # configure snapshot BX\n            self.i2c.write(\n                config={\"Aligner\": {\"Global\": {\"orbsyn_cnt_snapshot\": bx}}},\n                log=True,\n                readback=False,\n            )\n    \n            # send FC\n            if \"ECOND\" in self.target:\n                self.fc.send(\"link_reset_rocd\")\n            else:\n                self.fc.send(\"link_reset_roct\")\n    \n            # check alignment\n            align_status = self.is_word_align(align_pattern, read_snapshot, active_erx)\n            if align_status:\n                self.logger.info(f\"Successful word alignment, snapshot bx: {bx}\")\n                return bx\n    \n        if not align_status:\n            self.logger.error(\n                f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\n            raise RuntimeError(\n>               f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\nE           RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]\n\n../utils/align.py:209: RuntimeError"
      },
      "teardown": {
        "duration": 0.0009240600047633052,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_packets.py::test_single_fcsequence[counter_100-None-fc_sequence2-eTx-012]",
      "lineno": 137,
      "outcome": "error",
      "keywords": [
        "test_single_fcsequence[counter_100-None-fc_sequence2-eTx-012]",
        "pytestmark",
        "counter_100-None-fc_sequence2-eTx-012",
        "parametrize",
        "skip_target",
        "order",
        "test_packets.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.010140844999114051,
        "outcome": "failed",
        "crash": {
          "path": "../utils/align.py",
          "lineno": 209,
          "message": "RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]"
        },
        "traceback": [
          {
            "path": "../common_pytest/fixtures.py",
            "lineno": 488,
            "message": ""
          },
          {
            "path": "../common_pytest/fixtures_utils.py",
            "lineno": 263,
            "message": "in word_align"
          },
          {
            "path": "../utils/align.py",
            "lineno": 209,
            "message": "RuntimeError"
          }
        ],
        "longrepr": "initial_setup = None\nI2C_basic_settings_pre_alignment = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0... @`\\x80\\xa0\\xc0\\xe0\\x80\\x00\\x00\\x00\\x00 \\x92\\xaa\\xaa*\\xf3?\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\ni2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\ntv = <utils.testvector.TestVector object at 0x7f91b0d9b0>\ngen = <utils.packetgenerator.PacketGenerator object at 0x7f9178dd30>\nroc_version = 'v3', align_pattern = 12273810550690239914\naligner = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\ntarget = 'ECOND'\n\n    @pytest.fixture(scope=\"session\")\n    def initial_word_align(\n        initial_setup,\n        I2C_basic_settings_pre_alignment,\n        i2c_asic,\n        tv,\n        gen,\n        roc_version,\n        align_pattern,\n        aligner,\n        load_val,\n        target,\n    ):\n        \"\"\"\n        Align the ASIC\n        \"\"\"\n        i2c_asic.write_all(I2C_basic_settings_pre_alignment)\n        i2c_asic.target.configure(runbit_set_config)\n    \n        if gen:\n            gen.set_global(\"bypass\", 1)\n        tv.configure_prbs(\"PRBS15_32b\", header_mask=0)\n        i2c_asic.train_channel()\n    \n        tv.write(\"n_idle_words\", 256)\n        tv.write(\"idle_word\", align_pattern >> 32)\n        tv.write(\"idle_word_BX0\", align_pattern & 0xFFFFFFFF)\n    \n        if \"ECOND\" in target:\n            gen.set_global(\"bypass\", 0)\n            gen.setup_roc(roc=roc_version)\n            gen.set_global(\"IdleFrame\", align_pattern & 0xFFFFFFF)\n            bx_offset = gen.read_global(\"Bx_offset\")\n            logging.debug(\n                f\"ROC DAQ packet generator active, bx_offset: 0x{bx_offset:02x}, load_val: {load_val}\"\n            )\n    \n>       new_snap_bx = word_align(align_pattern, aligner, load_val, active_erx_align[target])\n\n../common_pytest/fixtures.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../common_pytest/fixtures_utils.py:263: in word_align\n    active_erx=active_erx,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\nsnapshot_bxs = [5, 3, 0, 6, 7, 4, ...], align_pattern = 12273810550690239914\nactive_erx = 63, read_snapshot = True, i2c_setup = False\n\n    def word_align(\n        self,\n        load_val,\n        snapshot_bxs,\n        align_pattern=0xA555555595555555,\n        active_erx=0xFFF,\n        read_snapshot=True,\n        i2c_setup=True,\n    ):\n        \"\"\"\n        Automatic word alignment\n    \n        :param load_val: Value that the internal ECON BX counter resets to when it receives a BCR\n        :type load_val: int\n        :param snapshot_bxs: BX counters (internal to ECON) at which to take the snapshot\n        :type snapshot_bxs: tuple(int)\n        \"\"\"\n    \n        self.logger.info(\"Starting automatic word alignment \\n\")\n    \n        self.fc.basic_setup()\n    \n        if i2c_setup:\n            # configure Automatic Alignment mode\n            self.i2c.write(\n                config={\n                    \"Aligner\": {\n                        \"Global\": {\n                            \"match_pattern_val\": align_pattern,\n                            \"match_mask_val\": 0,\n                            \"i2c_snapshot_en\": 0,\n                            \"snapshot_en\": 1,\n                            \"snapshot_arm\": 0,\n                            \"orbsyn_cnt_max_val\": 3563,\n                            \"orbsyn_cnt_load_val\": load_val,\n                        }\n                    },\n                    \"ChAligner\": {\n                        i: {\n                            \"per_ch_align_en\": 1,\n                            \"sel_override_en\": 0,\n                            \"patt_en\": 0,\n                            \"prbs28_en\": 0,\n                            \"prbs_chk_en\": 0,\n                        }\n                        for i in range(12)\n                    },\n                },\n                log=False,\n                readback=False,\n            )\n            if \"ECOND\" in self.i2c.name:\n                self.i2c.write(\n                    config={\n                        \"RocDaqCtrl\": {\n                            \"Global\": {\n                                \"active_erxs\": active_erx,\n                            }\n                        },\n                    },\n                    log=False,\n                    readback=False,\n                )\n    \n        align_status = False\n        for bx in snapshot_bxs:\n            self.logger.info(f\"Set snapshot bx: {bx}\")\n            # configure snapshot BX\n            self.i2c.write(\n                config={\"Aligner\": {\"Global\": {\"orbsyn_cnt_snapshot\": bx}}},\n                log=True,\n                readback=False,\n            )\n    \n            # send FC\n            if \"ECOND\" in self.target:\n                self.fc.send(\"link_reset_rocd\")\n            else:\n                self.fc.send(\"link_reset_roct\")\n    \n            # check alignment\n            align_status = self.is_word_align(align_pattern, read_snapshot, active_erx)\n            if align_status:\n                self.logger.info(f\"Successful word alignment, snapshot bx: {bx}\")\n                return bx\n    \n        if not align_status:\n            self.logger.error(\n                f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\n            raise RuntimeError(\n>               f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\nE           RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]\n\n../utils/align.py:209: RuntimeError"
      },
      "teardown": {
        "duration": 0.000892170995939523,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_packets.py::test_single_fcsequence[counter_100-None-fc_sequence3-eTx-0123]",
      "lineno": 137,
      "outcome": "error",
      "keywords": [
        "test_single_fcsequence[counter_100-None-fc_sequence3-eTx-0123]",
        "pytestmark",
        "counter_100-None-fc_sequence3-eTx-0123",
        "parametrize",
        "skip_target",
        "order",
        "test_packets.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.009891604000586085,
        "outcome": "failed",
        "crash": {
          "path": "../utils/align.py",
          "lineno": 209,
          "message": "RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]"
        },
        "traceback": [
          {
            "path": "../common_pytest/fixtures.py",
            "lineno": 488,
            "message": ""
          },
          {
            "path": "../common_pytest/fixtures_utils.py",
            "lineno": 263,
            "message": "in word_align"
          },
          {
            "path": "../utils/align.py",
            "lineno": 209,
            "message": "RuntimeError"
          }
        ],
        "longrepr": "initial_setup = None\nI2C_basic_settings_pre_alignment = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0... @`\\x80\\xa0\\xc0\\xe0\\x80\\x00\\x00\\x00\\x00 \\x92\\xaa\\xaa*\\xf3?\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\ni2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\ntv = <utils.testvector.TestVector object at 0x7f91b0d9b0>\ngen = <utils.packetgenerator.PacketGenerator object at 0x7f9178dd30>\nroc_version = 'v3', align_pattern = 12273810550690239914\naligner = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\ntarget = 'ECOND'\n\n    @pytest.fixture(scope=\"session\")\n    def initial_word_align(\n        initial_setup,\n        I2C_basic_settings_pre_alignment,\n        i2c_asic,\n        tv,\n        gen,\n        roc_version,\n        align_pattern,\n        aligner,\n        load_val,\n        target,\n    ):\n        \"\"\"\n        Align the ASIC\n        \"\"\"\n        i2c_asic.write_all(I2C_basic_settings_pre_alignment)\n        i2c_asic.target.configure(runbit_set_config)\n    \n        if gen:\n            gen.set_global(\"bypass\", 1)\n        tv.configure_prbs(\"PRBS15_32b\", header_mask=0)\n        i2c_asic.train_channel()\n    \n        tv.write(\"n_idle_words\", 256)\n        tv.write(\"idle_word\", align_pattern >> 32)\n        tv.write(\"idle_word_BX0\", align_pattern & 0xFFFFFFFF)\n    \n        if \"ECOND\" in target:\n            gen.set_global(\"bypass\", 0)\n            gen.setup_roc(roc=roc_version)\n            gen.set_global(\"IdleFrame\", align_pattern & 0xFFFFFFF)\n            bx_offset = gen.read_global(\"Bx_offset\")\n            logging.debug(\n                f\"ROC DAQ packet generator active, bx_offset: 0x{bx_offset:02x}, load_val: {load_val}\"\n            )\n    \n>       new_snap_bx = word_align(align_pattern, aligner, load_val, active_erx_align[target])\n\n../common_pytest/fixtures.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../common_pytest/fixtures_utils.py:263: in word_align\n    active_erx=active_erx,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\nsnapshot_bxs = [5, 3, 0, 6, 7, 4, ...], align_pattern = 12273810550690239914\nactive_erx = 63, read_snapshot = True, i2c_setup = False\n\n    def word_align(\n        self,\n        load_val,\n        snapshot_bxs,\n        align_pattern=0xA555555595555555,\n        active_erx=0xFFF,\n        read_snapshot=True,\n        i2c_setup=True,\n    ):\n        \"\"\"\n        Automatic word alignment\n    \n        :param load_val: Value that the internal ECON BX counter resets to when it receives a BCR\n        :type load_val: int\n        :param snapshot_bxs: BX counters (internal to ECON) at which to take the snapshot\n        :type snapshot_bxs: tuple(int)\n        \"\"\"\n    \n        self.logger.info(\"Starting automatic word alignment \\n\")\n    \n        self.fc.basic_setup()\n    \n        if i2c_setup:\n            # configure Automatic Alignment mode\n            self.i2c.write(\n                config={\n                    \"Aligner\": {\n                        \"Global\": {\n                            \"match_pattern_val\": align_pattern,\n                            \"match_mask_val\": 0,\n                            \"i2c_snapshot_en\": 0,\n                            \"snapshot_en\": 1,\n                            \"snapshot_arm\": 0,\n                            \"orbsyn_cnt_max_val\": 3563,\n                            \"orbsyn_cnt_load_val\": load_val,\n                        }\n                    },\n                    \"ChAligner\": {\n                        i: {\n                            \"per_ch_align_en\": 1,\n                            \"sel_override_en\": 0,\n                            \"patt_en\": 0,\n                            \"prbs28_en\": 0,\n                            \"prbs_chk_en\": 0,\n                        }\n                        for i in range(12)\n                    },\n                },\n                log=False,\n                readback=False,\n            )\n            if \"ECOND\" in self.i2c.name:\n                self.i2c.write(\n                    config={\n                        \"RocDaqCtrl\": {\n                            \"Global\": {\n                                \"active_erxs\": active_erx,\n                            }\n                        },\n                    },\n                    log=False,\n                    readback=False,\n                )\n    \n        align_status = False\n        for bx in snapshot_bxs:\n            self.logger.info(f\"Set snapshot bx: {bx}\")\n            # configure snapshot BX\n            self.i2c.write(\n                config={\"Aligner\": {\"Global\": {\"orbsyn_cnt_snapshot\": bx}}},\n                log=True,\n                readback=False,\n            )\n    \n            # send FC\n            if \"ECOND\" in self.target:\n                self.fc.send(\"link_reset_rocd\")\n            else:\n                self.fc.send(\"link_reset_roct\")\n    \n            # check alignment\n            align_status = self.is_word_align(align_pattern, read_snapshot, active_erx)\n            if align_status:\n                self.logger.info(f\"Successful word alignment, snapshot bx: {bx}\")\n                return bx\n    \n        if not align_status:\n            self.logger.error(\n                f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\n            raise RuntimeError(\n>               f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\nE           RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]\n\n../utils/align.py:209: RuntimeError"
      },
      "teardown": {
        "duration": 0.0009048600040841848,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_packets.py::test_single_fcsequence[counter_100-None-fc_sequence4-eTx-01234]",
      "lineno": 137,
      "outcome": "error",
      "keywords": [
        "test_single_fcsequence[counter_100-None-fc_sequence4-eTx-01234]",
        "pytestmark",
        "counter_100-None-fc_sequence4-eTx-01234",
        "parametrize",
        "skip_target",
        "order",
        "test_packets.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.009936634989571758,
        "outcome": "failed",
        "crash": {
          "path": "../utils/align.py",
          "lineno": 209,
          "message": "RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]"
        },
        "traceback": [
          {
            "path": "../common_pytest/fixtures.py",
            "lineno": 488,
            "message": ""
          },
          {
            "path": "../common_pytest/fixtures_utils.py",
            "lineno": 263,
            "message": "in word_align"
          },
          {
            "path": "../utils/align.py",
            "lineno": 209,
            "message": "RuntimeError"
          }
        ],
        "longrepr": "initial_setup = None\nI2C_basic_settings_pre_alignment = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0... @`\\x80\\xa0\\xc0\\xe0\\x80\\x00\\x00\\x00\\x00 \\x92\\xaa\\xaa*\\xf3?\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\ni2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\ntv = <utils.testvector.TestVector object at 0x7f91b0d9b0>\ngen = <utils.packetgenerator.PacketGenerator object at 0x7f9178dd30>\nroc_version = 'v3', align_pattern = 12273810550690239914\naligner = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\ntarget = 'ECOND'\n\n    @pytest.fixture(scope=\"session\")\n    def initial_word_align(\n        initial_setup,\n        I2C_basic_settings_pre_alignment,\n        i2c_asic,\n        tv,\n        gen,\n        roc_version,\n        align_pattern,\n        aligner,\n        load_val,\n        target,\n    ):\n        \"\"\"\n        Align the ASIC\n        \"\"\"\n        i2c_asic.write_all(I2C_basic_settings_pre_alignment)\n        i2c_asic.target.configure(runbit_set_config)\n    \n        if gen:\n            gen.set_global(\"bypass\", 1)\n        tv.configure_prbs(\"PRBS15_32b\", header_mask=0)\n        i2c_asic.train_channel()\n    \n        tv.write(\"n_idle_words\", 256)\n        tv.write(\"idle_word\", align_pattern >> 32)\n        tv.write(\"idle_word_BX0\", align_pattern & 0xFFFFFFFF)\n    \n        if \"ECOND\" in target:\n            gen.set_global(\"bypass\", 0)\n            gen.setup_roc(roc=roc_version)\n            gen.set_global(\"IdleFrame\", align_pattern & 0xFFFFFFF)\n            bx_offset = gen.read_global(\"Bx_offset\")\n            logging.debug(\n                f\"ROC DAQ packet generator active, bx_offset: 0x{bx_offset:02x}, load_val: {load_val}\"\n            )\n    \n>       new_snap_bx = word_align(align_pattern, aligner, load_val, active_erx_align[target])\n\n../common_pytest/fixtures.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../common_pytest/fixtures_utils.py:263: in word_align\n    active_erx=active_erx,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\nsnapshot_bxs = [5, 3, 0, 6, 7, 4, ...], align_pattern = 12273810550690239914\nactive_erx = 63, read_snapshot = True, i2c_setup = False\n\n    def word_align(\n        self,\n        load_val,\n        snapshot_bxs,\n        align_pattern=0xA555555595555555,\n        active_erx=0xFFF,\n        read_snapshot=True,\n        i2c_setup=True,\n    ):\n        \"\"\"\n        Automatic word alignment\n    \n        :param load_val: Value that the internal ECON BX counter resets to when it receives a BCR\n        :type load_val: int\n        :param snapshot_bxs: BX counters (internal to ECON) at which to take the snapshot\n        :type snapshot_bxs: tuple(int)\n        \"\"\"\n    \n        self.logger.info(\"Starting automatic word alignment \\n\")\n    \n        self.fc.basic_setup()\n    \n        if i2c_setup:\n            # configure Automatic Alignment mode\n            self.i2c.write(\n                config={\n                    \"Aligner\": {\n                        \"Global\": {\n                            \"match_pattern_val\": align_pattern,\n                            \"match_mask_val\": 0,\n                            \"i2c_snapshot_en\": 0,\n                            \"snapshot_en\": 1,\n                            \"snapshot_arm\": 0,\n                            \"orbsyn_cnt_max_val\": 3563,\n                            \"orbsyn_cnt_load_val\": load_val,\n                        }\n                    },\n                    \"ChAligner\": {\n                        i: {\n                            \"per_ch_align_en\": 1,\n                            \"sel_override_en\": 0,\n                            \"patt_en\": 0,\n                            \"prbs28_en\": 0,\n                            \"prbs_chk_en\": 0,\n                        }\n                        for i in range(12)\n                    },\n                },\n                log=False,\n                readback=False,\n            )\n            if \"ECOND\" in self.i2c.name:\n                self.i2c.write(\n                    config={\n                        \"RocDaqCtrl\": {\n                            \"Global\": {\n                                \"active_erxs\": active_erx,\n                            }\n                        },\n                    },\n                    log=False,\n                    readback=False,\n                )\n    \n        align_status = False\n        for bx in snapshot_bxs:\n            self.logger.info(f\"Set snapshot bx: {bx}\")\n            # configure snapshot BX\n            self.i2c.write(\n                config={\"Aligner\": {\"Global\": {\"orbsyn_cnt_snapshot\": bx}}},\n                log=True,\n                readback=False,\n            )\n    \n            # send FC\n            if \"ECOND\" in self.target:\n                self.fc.send(\"link_reset_rocd\")\n            else:\n                self.fc.send(\"link_reset_roct\")\n    \n            # check alignment\n            align_status = self.is_word_align(align_pattern, read_snapshot, active_erx)\n            if align_status:\n                self.logger.info(f\"Successful word alignment, snapshot bx: {bx}\")\n                return bx\n    \n        if not align_status:\n            self.logger.error(\n                f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\n            raise RuntimeError(\n>               f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\nE           RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]\n\n../utils/align.py:209: RuntimeError"
      },
      "teardown": {
        "duration": 0.0008922599954530597,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_packets.py::test_single_fcsequence[counter_100-None-fc_sequence5-eTx-012345]",
      "lineno": 137,
      "outcome": "error",
      "keywords": [
        "test_single_fcsequence[counter_100-None-fc_sequence5-eTx-012345]",
        "pytestmark",
        "counter_100-None-fc_sequence5-eTx-012345",
        "parametrize",
        "skip_target",
        "order",
        "test_packets.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.009913414003676735,
        "outcome": "failed",
        "crash": {
          "path": "../utils/align.py",
          "lineno": 209,
          "message": "RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]"
        },
        "traceback": [
          {
            "path": "../common_pytest/fixtures.py",
            "lineno": 488,
            "message": ""
          },
          {
            "path": "../common_pytest/fixtures_utils.py",
            "lineno": 263,
            "message": "in word_align"
          },
          {
            "path": "../utils/align.py",
            "lineno": 209,
            "message": "RuntimeError"
          }
        ],
        "longrepr": "initial_setup = None\nI2C_basic_settings_pre_alignment = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0... @`\\x80\\xa0\\xc0\\xe0\\x80\\x00\\x00\\x00\\x00 \\x92\\xaa\\xaa*\\xf3?\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\ni2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\ntv = <utils.testvector.TestVector object at 0x7f91b0d9b0>\ngen = <utils.packetgenerator.PacketGenerator object at 0x7f9178dd30>\nroc_version = 'v3', align_pattern = 12273810550690239914\naligner = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\ntarget = 'ECOND'\n\n    @pytest.fixture(scope=\"session\")\n    def initial_word_align(\n        initial_setup,\n        I2C_basic_settings_pre_alignment,\n        i2c_asic,\n        tv,\n        gen,\n        roc_version,\n        align_pattern,\n        aligner,\n        load_val,\n        target,\n    ):\n        \"\"\"\n        Align the ASIC\n        \"\"\"\n        i2c_asic.write_all(I2C_basic_settings_pre_alignment)\n        i2c_asic.target.configure(runbit_set_config)\n    \n        if gen:\n            gen.set_global(\"bypass\", 1)\n        tv.configure_prbs(\"PRBS15_32b\", header_mask=0)\n        i2c_asic.train_channel()\n    \n        tv.write(\"n_idle_words\", 256)\n        tv.write(\"idle_word\", align_pattern >> 32)\n        tv.write(\"idle_word_BX0\", align_pattern & 0xFFFFFFFF)\n    \n        if \"ECOND\" in target:\n            gen.set_global(\"bypass\", 0)\n            gen.setup_roc(roc=roc_version)\n            gen.set_global(\"IdleFrame\", align_pattern & 0xFFFFFFF)\n            bx_offset = gen.read_global(\"Bx_offset\")\n            logging.debug(\n                f\"ROC DAQ packet generator active, bx_offset: 0x{bx_offset:02x}, load_val: {load_val}\"\n            )\n    \n>       new_snap_bx = word_align(align_pattern, aligner, load_val, active_erx_align[target])\n\n../common_pytest/fixtures.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../common_pytest/fixtures_utils.py:263: in word_align\n    active_erx=active_erx,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\nsnapshot_bxs = [5, 3, 0, 6, 7, 4, ...], align_pattern = 12273810550690239914\nactive_erx = 63, read_snapshot = True, i2c_setup = False\n\n    def word_align(\n        self,\n        load_val,\n        snapshot_bxs,\n        align_pattern=0xA555555595555555,\n        active_erx=0xFFF,\n        read_snapshot=True,\n        i2c_setup=True,\n    ):\n        \"\"\"\n        Automatic word alignment\n    \n        :param load_val: Value that the internal ECON BX counter resets to when it receives a BCR\n        :type load_val: int\n        :param snapshot_bxs: BX counters (internal to ECON) at which to take the snapshot\n        :type snapshot_bxs: tuple(int)\n        \"\"\"\n    \n        self.logger.info(\"Starting automatic word alignment \\n\")\n    \n        self.fc.basic_setup()\n    \n        if i2c_setup:\n            # configure Automatic Alignment mode\n            self.i2c.write(\n                config={\n                    \"Aligner\": {\n                        \"Global\": {\n                            \"match_pattern_val\": align_pattern,\n                            \"match_mask_val\": 0,\n                            \"i2c_snapshot_en\": 0,\n                            \"snapshot_en\": 1,\n                            \"snapshot_arm\": 0,\n                            \"orbsyn_cnt_max_val\": 3563,\n                            \"orbsyn_cnt_load_val\": load_val,\n                        }\n                    },\n                    \"ChAligner\": {\n                        i: {\n                            \"per_ch_align_en\": 1,\n                            \"sel_override_en\": 0,\n                            \"patt_en\": 0,\n                            \"prbs28_en\": 0,\n                            \"prbs_chk_en\": 0,\n                        }\n                        for i in range(12)\n                    },\n                },\n                log=False,\n                readback=False,\n            )\n            if \"ECOND\" in self.i2c.name:\n                self.i2c.write(\n                    config={\n                        \"RocDaqCtrl\": {\n                            \"Global\": {\n                                \"active_erxs\": active_erx,\n                            }\n                        },\n                    },\n                    log=False,\n                    readback=False,\n                )\n    \n        align_status = False\n        for bx in snapshot_bxs:\n            self.logger.info(f\"Set snapshot bx: {bx}\")\n            # configure snapshot BX\n            self.i2c.write(\n                config={\"Aligner\": {\"Global\": {\"orbsyn_cnt_snapshot\": bx}}},\n                log=True,\n                readback=False,\n            )\n    \n            # send FC\n            if \"ECOND\" in self.target:\n                self.fc.send(\"link_reset_rocd\")\n            else:\n                self.fc.send(\"link_reset_roct\")\n    \n            # check alignment\n            align_status = self.is_word_align(align_pattern, read_snapshot, active_erx)\n            if align_status:\n                self.logger.info(f\"Successful word alignment, snapshot bx: {bx}\")\n                return bx\n    \n        if not align_status:\n            self.logger.error(\n                f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\n            raise RuntimeError(\n>               f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\nE           RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]\n\n../utils/align.py:209: RuntimeError"
      },
      "teardown": {
        "duration": 0.000906390996533446,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_packets.py::test_single_fcsequence[None-../econd_testvectors/exampleData/testVectorInputs_Random.csv-fc_sequence6-ZS_37]",
      "lineno": 137,
      "outcome": "error",
      "keywords": [
        "test_single_fcsequence[None-../econd_testvectors/exampleData/testVectorInputs_Random.csv-fc_sequence6-ZS_37]",
        "pytestmark",
        "None-../econd_testvectors/exampleData/testVectorInputs_Random.csv-fc_sequence6-ZS_37",
        "parametrize",
        "skip_target",
        "order",
        "test_packets.py",
        "test_bench"
      ],
      "setup": {
        "duration": 0.009882454003673047,
        "outcome": "failed",
        "crash": {
          "path": "../utils/align.py",
          "lineno": 209,
          "message": "RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]"
        },
        "traceback": [
          {
            "path": "../common_pytest/fixtures.py",
            "lineno": 488,
            "message": ""
          },
          {
            "path": "../common_pytest/fixtures_utils.py",
            "lineno": 263,
            "message": "in word_align"
          },
          {
            "path": "../utils/align.py",
            "lineno": 209,
            "message": "RuntimeError"
          }
        ],
        "longrepr": "initial_setup = None\nI2C_basic_settings_pre_alignment = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0... @`\\x80\\xa0\\xc0\\xe0\\x80\\x00\\x00\\x00\\x00 \\x92\\xaa\\xaa*\\xf3?\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\ni2c_asic = <econ_i2c.ECON_I2C object at 0x7f91b191d0>\ntv = <utils.testvector.TestVector object at 0x7f91b0d9b0>\ngen = <utils.packetgenerator.PacketGenerator object at 0x7f9178dd30>\nroc_version = 'v3', align_pattern = 12273810550690239914\naligner = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\ntarget = 'ECOND'\n\n    @pytest.fixture(scope=\"session\")\n    def initial_word_align(\n        initial_setup,\n        I2C_basic_settings_pre_alignment,\n        i2c_asic,\n        tv,\n        gen,\n        roc_version,\n        align_pattern,\n        aligner,\n        load_val,\n        target,\n    ):\n        \"\"\"\n        Align the ASIC\n        \"\"\"\n        i2c_asic.write_all(I2C_basic_settings_pre_alignment)\n        i2c_asic.target.configure(runbit_set_config)\n    \n        if gen:\n            gen.set_global(\"bypass\", 1)\n        tv.configure_prbs(\"PRBS15_32b\", header_mask=0)\n        i2c_asic.train_channel()\n    \n        tv.write(\"n_idle_words\", 256)\n        tv.write(\"idle_word\", align_pattern >> 32)\n        tv.write(\"idle_word_BX0\", align_pattern & 0xFFFFFFFF)\n    \n        if \"ECOND\" in target:\n            gen.set_global(\"bypass\", 0)\n            gen.setup_roc(roc=roc_version)\n            gen.set_global(\"IdleFrame\", align_pattern & 0xFFFFFFF)\n            bx_offset = gen.read_global(\"Bx_offset\")\n            logging.debug(\n                f\"ROC DAQ packet generator active, bx_offset: 0x{bx_offset:02x}, load_val: {load_val}\"\n            )\n    \n>       new_snap_bx = word_align(align_pattern, aligner, load_val, active_erx_align[target])\n\n../common_pytest/fixtures.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../common_pytest/fixtures_utils.py:263: in word_align\n    active_erx=active_erx,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.align.Aligner object at 0x7f9184c9e8>, load_val = 1\nsnapshot_bxs = [5, 3, 0, 6, 7, 4, ...], align_pattern = 12273810550690239914\nactive_erx = 63, read_snapshot = True, i2c_setup = False\n\n    def word_align(\n        self,\n        load_val,\n        snapshot_bxs,\n        align_pattern=0xA555555595555555,\n        active_erx=0xFFF,\n        read_snapshot=True,\n        i2c_setup=True,\n    ):\n        \"\"\"\n        Automatic word alignment\n    \n        :param load_val: Value that the internal ECON BX counter resets to when it receives a BCR\n        :type load_val: int\n        :param snapshot_bxs: BX counters (internal to ECON) at which to take the snapshot\n        :type snapshot_bxs: tuple(int)\n        \"\"\"\n    \n        self.logger.info(\"Starting automatic word alignment \\n\")\n    \n        self.fc.basic_setup()\n    \n        if i2c_setup:\n            # configure Automatic Alignment mode\n            self.i2c.write(\n                config={\n                    \"Aligner\": {\n                        \"Global\": {\n                            \"match_pattern_val\": align_pattern,\n                            \"match_mask_val\": 0,\n                            \"i2c_snapshot_en\": 0,\n                            \"snapshot_en\": 1,\n                            \"snapshot_arm\": 0,\n                            \"orbsyn_cnt_max_val\": 3563,\n                            \"orbsyn_cnt_load_val\": load_val,\n                        }\n                    },\n                    \"ChAligner\": {\n                        i: {\n                            \"per_ch_align_en\": 1,\n                            \"sel_override_en\": 0,\n                            \"patt_en\": 0,\n                            \"prbs28_en\": 0,\n                            \"prbs_chk_en\": 0,\n                        }\n                        for i in range(12)\n                    },\n                },\n                log=False,\n                readback=False,\n            )\n            if \"ECOND\" in self.i2c.name:\n                self.i2c.write(\n                    config={\n                        \"RocDaqCtrl\": {\n                            \"Global\": {\n                                \"active_erxs\": active_erx,\n                            }\n                        },\n                    },\n                    log=False,\n                    readback=False,\n                )\n    \n        align_status = False\n        for bx in snapshot_bxs:\n            self.logger.info(f\"Set snapshot bx: {bx}\")\n            # configure snapshot BX\n            self.i2c.write(\n                config={\"Aligner\": {\"Global\": {\"orbsyn_cnt_snapshot\": bx}}},\n                log=True,\n                readback=False,\n            )\n    \n            # send FC\n            if \"ECOND\" in self.target:\n                self.fc.send(\"link_reset_rocd\")\n            else:\n                self.fc.send(\"link_reset_roct\")\n    \n            # check alignment\n            align_status = self.is_word_align(align_pattern, read_snapshot, active_erx)\n            if align_status:\n                self.logger.info(f\"Successful word alignment, snapshot bx: {bx}\")\n                return bx\n    \n        if not align_status:\n            self.logger.error(\n                f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\n            raise RuntimeError(\n>               f\"Failed to word-align the ASIC with snapshot BXs {snapshot_bxs}\"\n            )\nE           RuntimeError: Failed to word-align the ASIC with snapshot BXs [5, 3, 0, 6, 7, 4, 8, 9, 2, 10, 1, 11, 12]\n\n../utils/align.py:209: RuntimeError"
      },
      "teardown": {
        "duration": 0.0009218100021826103,
        "outcome": "passed"
      }
    }
  ],
  "FPGA-hexa-IP": "46",
  "branch": "master",
  "commit_hash": "bd1404b194fdfb3d835d9e31701894c4ed5fb4d6",
  "remote_url": "https://:@gitlab.cern.ch:8443/hgcal-daq-sw/econd-sw.git",
  "status": "",
  "firmware_name": "econ-d-tester-COB.bit\u0000",
  "firmware_git_desc": "235004e-dirty",
  "chip_number": null
}